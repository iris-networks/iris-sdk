/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { videoEditingDeleteFrame } from "../funcs/videoEditingDeleteFrame.js";
import { videoEditingRegenerate } from "../funcs/videoEditingRegenerate.js";
import { videoEditingUpdateCaption } from "../funcs/videoEditingUpdateCaption.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class VideoEditing extends ClientSDK {
  /**
   * Delete a frame
   *
   * @remarks
   * Deletes a specific frame from a recording and updates captions accordingly
   */
  async deleteFrame(
    request: operations.DeleteFrameRequest,
    options?: RequestOptions,
  ): Promise<components.SuccessResponseDto> {
    return unwrapAsync(videoEditingDeleteFrame(
      this,
      request,
      options,
    ));
  }

  /**
   * Update caption for a frame
   *
   * @remarks
   * Updates the caption text for a specific frame
   */
  async updateCaption(
    request: operations.UpdateCaptionRequest,
    options?: RequestOptions,
  ): Promise<components.SuccessResponseDto> {
    return unwrapAsync(videoEditingUpdateCaption(
      this,
      request,
      options,
    ));
  }

  /**
   * Regenerate video after edits
   *
   * @remarks
   * Regenerates the video file after frames or captions have been edited
   */
  async regenerate(
    request: operations.RegenerateVideoRequest,
    options?: RequestOptions,
  ): Promise<components.SuccessResponseDto> {
    return unwrapAsync(videoEditingRegenerate(
      this,
      request,
      options,
    ));
  }
}
