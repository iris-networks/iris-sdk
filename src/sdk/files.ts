/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { filesDelete } from "../funcs/filesDelete.js";
import { filesDownload } from "../funcs/filesDownload.js";
import { filesGetInfo } from "../funcs/filesGetInfo.js";
import { filesList } from "../funcs/filesList.js";
import { filesUpload } from "../funcs/filesUpload.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Files extends ClientSDK {
  /**
   * Upload a file
   *
   * @remarks
   * Upload a file for later processing. The system stores the file and provides a unique identifier for future reference.
   */
  async upload(
    request: components.FileUploadDto,
    options?: RequestOptions,
  ): Promise<components.FileUploadResponseDto> {
    return unwrapAsync(filesUpload(
      this,
      request,
      options,
    ));
  }

  /**
   * List all uploaded files
   */
  async list(
    options?: RequestOptions,
  ): Promise<Array<components.FileInfoDto>> {
    return unwrapAsync(filesList(
      this,
      options,
    ));
  }

  /**
   * Get information about a specific file
   */
  async getInfo(
    request: operations.GetFileInfoRequest,
    options?: RequestOptions,
  ): Promise<components.FileInfoDto> {
    return unwrapAsync(filesGetInfo(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a file
   */
  async delete(
    request: operations.DeleteFileRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteFileResponseBody> {
    return unwrapAsync(filesDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Download a file
   */
  async download(
    request: operations.DownloadFileRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(filesDownload(
      this,
      request,
      options,
    ));
  }
}
