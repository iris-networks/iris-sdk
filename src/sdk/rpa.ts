/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { rpaBatchExecute } from "../funcs/rpaBatchExecute.js";
import { rpaGetParameterTemplate } from "../funcs/rpaGetParameterTemplate.js";
import { rpaGetStatus } from "../funcs/rpaGetStatus.js";
import { rpaStartExecution } from "../funcs/rpaStartExecution.js";
import { rpaStopExecution } from "../funcs/rpaStopExecution.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Rpa extends ClientSDK {
  /**
   * Start RPA execution from a recording
   *
   * @remarks
   * Initiates an automated execution of actions captured in a recording. This endpoint enables precise replay of previously recorded tasks with exact timing and interaction patterns. The system faithfully reproduces the recorded sequence, maintaining the original intent and workflow across different execution environments.
   */
  async startExecution(
    request: components.StartRpaExecutionDto,
    options?: RequestOptions,
  ): Promise<components.RpaExecutionStatusDto> {
    return unwrapAsync(rpaStartExecution(
      this,
      request,
      options,
    ));
  }

  /**
   * Stop an ongoing RPA execution
   *
   * @remarks
   * Stops a running RPA execution and releases resources.
   */
  async stopExecution(
    request: operations.StopExecutionRequest,
    options?: RequestOptions,
  ): Promise<components.RpaExecutionStatusDto> {
    return unwrapAsync(rpaStopExecution(
      this,
      request,
      options,
    ));
  }

  /**
   * Get status of an RPA execution
   *
   * @remarks
   * Returns the current status and progress of an RPA execution.
   */
  async getStatus(
    request: operations.GetExecutionStatusRequest,
    options?: RequestOptions,
  ): Promise<components.RpaExecutionStatusDto> {
    return unwrapAsync(rpaGetStatus(
      this,
      request,
      options,
    ));
  }

  /**
   * Get parameter template for a recording
   *
   * @remarks
   * Returns a template with all parameterizable fields in a recording. This endpoint enables the core caching capability by extracting variable input points from recorded tasks. It identifies text entry fields, search queries, and other customizable elements that can be modified for each execution. This allows a single recorded workflow to be adapted for multiple scenarios without re-recording.
   */
  async getParameterTemplate(
    request: operations.GetParameterTemplateRequest,
    options?: RequestOptions,
  ): Promise<components.ParameterTemplateResponseDto> {
    return unwrapAsync(rpaGetParameterTemplate(
      this,
      request,
      options,
    ));
  }

  /**
   * Execute RPA with multiple parameter sets
   *
   * @remarks
   * Starts multiple RPA executions with different parameter values. This powerful endpoint enables scalable automation by running the same recorded task with variations across multiple datasets. It efficiently creates independent execution instances for each parameter set, allowing parallel processing of tasks that share the same workflow but operate on different inputs. This is particularly useful for batch processing scenarios like data entry, record updates, or multi-account operations.
   */
  async batchExecute(
    request: components.BatchExecuteRpaDto,
    options?: RequestOptions,
  ): Promise<components.SimpleSuccessResponseDto> {
    return unwrapAsync(rpaBatchExecute(
      this,
      request,
      options,
    ));
  }
}
