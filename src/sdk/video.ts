/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { videoExecuteRpa } from "../funcs/videoExecuteRpa.js";
import { videoGetAnalysisResults } from "../funcs/videoGetAnalysisResults.js";
import { videoStreamOriginal } from "../funcs/videoStreamOriginal.js";
import { videoStreamProcessed } from "../funcs/videoStreamProcessed.js";
import { videoUpload } from "../funcs/videoUpload.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Video extends ClientSDK {
  /**
   * Upload a video for RPA analysis
   *
   * @remarks
   * Upload a video recording of any task to automatically generate RPA workflows. The system learns from visual demonstration by analyzing screen recordings through computer vision. It identifies and extracts patterns of interaction including mouse movements, clicks, typing actions, and navigation sequences, converting them directly into executable automation without requiring manual scripting or programming.
   */
  async upload(
    request: components.VideoUploadDto,
    options?: RequestOptions,
  ): Promise<components.VideoAnalysisResponseDto> {
    return unwrapAsync(videoUpload(
      this,
      request,
      options,
    ));
  }

  /**
   * Get analysis results for a video
   */
  async getAnalysisResults(
    request: operations.GetAnalysisResultsRequest,
    options?: RequestOptions,
  ): Promise<components.RpaStepsDto> {
    return unwrapAsync(videoGetAnalysisResults(
      this,
      request,
      options,
    ));
  }

  /**
   * Execute RPA steps from video analysis
   *
   * @remarks
   * Executes automation steps extracted from video analysis. This endpoint enables the system to perform actions it learned through visual observation. Using a reasoning-based approach, the automation adapts to dynamic UI elements and handles environmental variations while following the core workflow pattern. This creates resilient processes that maintain functionality even when the target system has minor visual or layout changes.
   */
  async executeRpa(
    request: operations.ExecuteRpaStepsRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(videoExecuteRpa(
      this,
      request,
      options,
    ));
  }

  async streamProcessed(
    request: operations.StreamProcessedVideoRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(videoStreamProcessed(
      this,
      request,
      options,
    ));
  }

  async streamOriginal(
    request: operations.StreamOriginalVideoRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(videoStreamOriginal(
      this,
      request,
      options,
    ));
  }
}
