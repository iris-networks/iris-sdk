/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { videosStream } from "../../funcs/videosStream.js";
import * as operations from "../../models/operations/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request: operations.StreamVideoRequest$inboundSchema,
};

export const tool$videosStream: ToolDefinition<typeof args> = {
  name: "videos-stream",
  description: `Stream the generated video file

Streams the generated video file for a recording. This endpoint can be used directly in video players, such as in an HTML5 video tag. By default, videos play at 0.2 frames per second (5 seconds per frame) to allow time to read the captions. If the video has not been generated yet, it will attempt to generate it on-demand. If generation is already in progress, it returns a status update instead of the video. The endpoint supports both streaming (default) and download modes. The video duration will be correctly calculated based on the frame rate and number of screenshots.`,
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await videosStream(
      client,
      args.request,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
