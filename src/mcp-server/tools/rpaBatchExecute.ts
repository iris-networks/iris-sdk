/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { rpaBatchExecute } from "../../funcs/rpaBatchExecute.js";
import * as components from "../../models/components/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request: components.BatchExecuteRpaDto$inboundSchema,
};

export const tool$rpaBatchExecute: ToolDefinition<typeof args> = {
  name: "rpa-batch-execute",
  description: `Execute RPA with multiple parameter sets

Starts multiple RPA executions with different parameter values. This powerful endpoint enables scalable automation by running the same recorded task with variations across multiple datasets. It efficiently creates independent execution instances for each parameter set, allowing parallel processing of tasks that share the same workflow but operate on different inputs. This is particularly useful for batch processing scenarios like data entry, record updates, or multi-account operations.`,
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await rpaBatchExecute(
      client,
      args.request,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
