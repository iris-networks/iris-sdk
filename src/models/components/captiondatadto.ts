/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Conversation object containing the caption text and metadata
 */
export type Conversation = {};

export type CaptionDataDto = {
  /**
   * Timestamp when the caption was created
   */
  timestamp: number;
  /**
   * Conversation object containing the caption text and metadata
   */
  conversation: Conversation;
  /**
   * The index of the frame this caption belongs to
   */
  frameIndex: number;
};

/** @internal */
export const Conversation$inboundSchema: z.ZodType<
  Conversation,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type Conversation$Outbound = {};

/** @internal */
export const Conversation$outboundSchema: z.ZodType<
  Conversation$Outbound,
  z.ZodTypeDef,
  Conversation
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Conversation$ {
  /** @deprecated use `Conversation$inboundSchema` instead. */
  export const inboundSchema = Conversation$inboundSchema;
  /** @deprecated use `Conversation$outboundSchema` instead. */
  export const outboundSchema = Conversation$outboundSchema;
  /** @deprecated use `Conversation$Outbound` instead. */
  export type Outbound = Conversation$Outbound;
}

export function conversationToJSON(conversation: Conversation): string {
  return JSON.stringify(Conversation$outboundSchema.parse(conversation));
}

export function conversationFromJSON(
  jsonString: string,
): SafeParseResult<Conversation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Conversation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Conversation' from JSON`,
  );
}

/** @internal */
export const CaptionDataDto$inboundSchema: z.ZodType<
  CaptionDataDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  timestamp: z.number(),
  conversation: z.lazy(() => Conversation$inboundSchema),
  frameIndex: z.number(),
});

/** @internal */
export type CaptionDataDto$Outbound = {
  timestamp: number;
  conversation: Conversation$Outbound;
  frameIndex: number;
};

/** @internal */
export const CaptionDataDto$outboundSchema: z.ZodType<
  CaptionDataDto$Outbound,
  z.ZodTypeDef,
  CaptionDataDto
> = z.object({
  timestamp: z.number(),
  conversation: z.lazy(() => Conversation$outboundSchema),
  frameIndex: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CaptionDataDto$ {
  /** @deprecated use `CaptionDataDto$inboundSchema` instead. */
  export const inboundSchema = CaptionDataDto$inboundSchema;
  /** @deprecated use `CaptionDataDto$outboundSchema` instead. */
  export const outboundSchema = CaptionDataDto$outboundSchema;
  /** @deprecated use `CaptionDataDto$Outbound` instead. */
  export type Outbound = CaptionDataDto$Outbound;
}

export function captionDataDtoToJSON(captionDataDto: CaptionDataDto): string {
  return JSON.stringify(CaptionDataDto$outboundSchema.parse(captionDataDto));
}

export function captionDataDtoFromJSON(
  jsonString: string,
): SafeParseResult<CaptionDataDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CaptionDataDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CaptionDataDto' from JSON`,
  );
}
