/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Default Operator Type
 */
export const UpdateConfigDtoDefaultOperator = {
  Browser: "browser",
  Computer: "computer",
} as const;
/**
 * Default Operator Type
 */
export type UpdateConfigDtoDefaultOperator = ClosedEnum<
  typeof UpdateConfigDtoDefaultOperator
>;

export type UpdateConfigDto = {
  /**
   * VLM Base URL
   */
  vlmBaseUrl?: string | undefined;
  /**
   * VLM API Key
   */
  vlmApiKey?: string | undefined;
  /**
   * VLM Model Name
   */
  vlmModelName?: string | undefined;
  /**
   * VLM Provider
   */
  vlmProvider?: string | undefined;
  /**
   * Language
   */
  language?: string | undefined;
  /**
   * Default Operator Type
   */
  defaultOperator?: UpdateConfigDtoDefaultOperator | undefined;
  /**
   * Maximum Loop Count
   */
  maxLoopCount?: number | undefined;
  /**
   * Loop Interval in Milliseconds
   */
  loopIntervalInMs?: number | undefined;
};

/** @internal */
export const UpdateConfigDtoDefaultOperator$inboundSchema: z.ZodNativeEnum<
  typeof UpdateConfigDtoDefaultOperator
> = z.nativeEnum(UpdateConfigDtoDefaultOperator);

/** @internal */
export const UpdateConfigDtoDefaultOperator$outboundSchema: z.ZodNativeEnum<
  typeof UpdateConfigDtoDefaultOperator
> = UpdateConfigDtoDefaultOperator$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateConfigDtoDefaultOperator$ {
  /** @deprecated use `UpdateConfigDtoDefaultOperator$inboundSchema` instead. */
  export const inboundSchema = UpdateConfigDtoDefaultOperator$inboundSchema;
  /** @deprecated use `UpdateConfigDtoDefaultOperator$outboundSchema` instead. */
  export const outboundSchema = UpdateConfigDtoDefaultOperator$outboundSchema;
}

/** @internal */
export const UpdateConfigDto$inboundSchema: z.ZodType<
  UpdateConfigDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  vlmBaseUrl: z.string().optional(),
  vlmApiKey: z.string().optional(),
  vlmModelName: z.string().optional(),
  vlmProvider: z.string().optional(),
  language: z.string().optional(),
  defaultOperator: UpdateConfigDtoDefaultOperator$inboundSchema.optional(),
  maxLoopCount: z.number().optional(),
  loopIntervalInMs: z.number().optional(),
});

/** @internal */
export type UpdateConfigDto$Outbound = {
  vlmBaseUrl?: string | undefined;
  vlmApiKey?: string | undefined;
  vlmModelName?: string | undefined;
  vlmProvider?: string | undefined;
  language?: string | undefined;
  defaultOperator?: string | undefined;
  maxLoopCount?: number | undefined;
  loopIntervalInMs?: number | undefined;
};

/** @internal */
export const UpdateConfigDto$outboundSchema: z.ZodType<
  UpdateConfigDto$Outbound,
  z.ZodTypeDef,
  UpdateConfigDto
> = z.object({
  vlmBaseUrl: z.string().optional(),
  vlmApiKey: z.string().optional(),
  vlmModelName: z.string().optional(),
  vlmProvider: z.string().optional(),
  language: z.string().optional(),
  defaultOperator: UpdateConfigDtoDefaultOperator$outboundSchema.optional(),
  maxLoopCount: z.number().optional(),
  loopIntervalInMs: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateConfigDto$ {
  /** @deprecated use `UpdateConfigDto$inboundSchema` instead. */
  export const inboundSchema = UpdateConfigDto$inboundSchema;
  /** @deprecated use `UpdateConfigDto$outboundSchema` instead. */
  export const outboundSchema = UpdateConfigDto$outboundSchema;
  /** @deprecated use `UpdateConfigDto$Outbound` instead. */
  export type Outbound = UpdateConfigDto$Outbound;
}

export function updateConfigDtoToJSON(
  updateConfigDto: UpdateConfigDto,
): string {
  return JSON.stringify(UpdateConfigDto$outboundSchema.parse(updateConfigDto));
}

export function updateConfigDtoFromJSON(
  jsonString: string,
): SafeParseResult<UpdateConfigDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateConfigDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateConfigDto' from JSON`,
  );
}
