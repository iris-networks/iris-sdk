/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Type of the item (file or directory)
 */
export const Type = {
  File: "file",
  Directory: "directory",
} as const;
/**
 * Type of the item (file or directory)
 */
export type Type = ClosedEnum<typeof Type>;

export type ArtifactItemDto = {
  /**
   * Name of the file or directory
   */
  name: string;
  /**
   * Type of the item (file or directory)
   */
  type: Type;
  /**
   * Size of the item in bytes (for files only)
   */
  size?: number | undefined;
  /**
   * Last modified timestamp
   */
  modifiedAt: string;
  /**
   * Full path relative to .iris folder
   */
  path: string;
  /**
   * File extension (for files only)
   */
  extension?: string | undefined;
};

/** @internal */
export const Type$inboundSchema: z.ZodNativeEnum<typeof Type> = z.nativeEnum(
  Type,
);

/** @internal */
export const Type$outboundSchema: z.ZodNativeEnum<typeof Type> =
  Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Type$ {
  /** @deprecated use `Type$inboundSchema` instead. */
  export const inboundSchema = Type$inboundSchema;
  /** @deprecated use `Type$outboundSchema` instead. */
  export const outboundSchema = Type$outboundSchema;
}

/** @internal */
export const ArtifactItemDto$inboundSchema: z.ZodType<
  ArtifactItemDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  type: Type$inboundSchema,
  size: z.number().optional(),
  modifiedAt: z.string(),
  path: z.string(),
  extension: z.string().optional(),
});

/** @internal */
export type ArtifactItemDto$Outbound = {
  name: string;
  type: string;
  size?: number | undefined;
  modifiedAt: string;
  path: string;
  extension?: string | undefined;
};

/** @internal */
export const ArtifactItemDto$outboundSchema: z.ZodType<
  ArtifactItemDto$Outbound,
  z.ZodTypeDef,
  ArtifactItemDto
> = z.object({
  name: z.string(),
  type: Type$outboundSchema,
  size: z.number().optional(),
  modifiedAt: z.string(),
  path: z.string(),
  extension: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ArtifactItemDto$ {
  /** @deprecated use `ArtifactItemDto$inboundSchema` instead. */
  export const inboundSchema = ArtifactItemDto$inboundSchema;
  /** @deprecated use `ArtifactItemDto$outboundSchema` instead. */
  export const outboundSchema = ArtifactItemDto$outboundSchema;
  /** @deprecated use `ArtifactItemDto$Outbound` instead. */
  export type Outbound = ArtifactItemDto$Outbound;
}

export function artifactItemDtoToJSON(
  artifactItemDto: ArtifactItemDto,
): string {
  return JSON.stringify(ArtifactItemDto$outboundSchema.parse(artifactItemDto));
}

export function artifactItemDtoFromJSON(
  jsonString: string,
): SafeParseResult<ArtifactItemDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ArtifactItemDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ArtifactItemDto' from JSON`,
  );
}
