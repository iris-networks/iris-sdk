/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import {
  collectExtraKeys as collectExtraKeys$,
  safeParse,
} from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Operator type used for the session
 */
export const RecordingResponseDtoOperatorType = {
  Browser: "browser",
  Computer: "computer",
} as const;
/**
 * Operator type used for the session
 */
export type RecordingResponseDtoOperatorType = ClosedEnum<
  typeof RecordingResponseDtoOperatorType
>;

/**
 * Status of video generation
 */
export const RecordingResponseDtoVideoGenerationStatus = {
  Pending: "pending",
  InProgress: "in_progress",
  Completed: "completed",
  Failed: "failed",
} as const;
/**
 * Status of video generation
 */
export type RecordingResponseDtoVideoGenerationStatus = ClosedEnum<
  typeof RecordingResponseDtoVideoGenerationStatus
>;

/**
 * Recording metadata
 */
export type Recording = {
  /**
   * Unique identifier for the recording
   */
  id: string;
  /**
   * Session ID this recording belongs to
   */
  sessionId: string;
  /**
   * Title of the recording
   */
  title: string;
  /**
   * Description of the recording
   */
  description?: string | undefined;
  /**
   * Timestamp when the recording was created
   */
  createdAt: number;
  /**
   * Duration of the recording in milliseconds
   */
  duration: number;
  /**
   * Number of frames in the recording
   */
  frameCount: number;
  /**
   * Path to the thumbnail image
   */
  thumbnailPath?: string | undefined;
  /**
   * Path to the recording files
   */
  filePath: string;
  /**
   * Size of the recording in bytes
   */
  size: number;
  /**
   * Operator type used for the session
   */
  operatorType?: RecordingResponseDtoOperatorType | undefined;
  /**
   * Status of video generation
   */
  videoGenerationStatus?: RecordingResponseDtoVideoGenerationStatus | undefined;
  /**
   * Timestamp when video generation started
   */
  videoGenerationStartedAt?: number | undefined;
  /**
   * Timestamp when video generation completed
   */
  videoGenerationCompletedAt?: number | undefined;
  /**
   * Error message if video generation failed
   */
  videoGenerationError?: string | undefined;
  /**
   * Whether the recording has a video
   */
  hasVideo?: boolean | undefined;
  /**
   * Path to the generated video file
   */
  videoPath?: string | undefined;
  /**
   * Format of the generated video
   */
  videoFormat?: string | undefined;
  /**
   * Size of the generated video in bytes
   */
  videoSize?: number | undefined;
  additionalProperties: { [k: string]: any };
};

export type RecordingResponseDto = {
  /**
   * Whether the request was successful
   */
  success: boolean;
  /**
   * Recording metadata
   */
  recording: Recording;
};

/** @internal */
export const RecordingResponseDtoOperatorType$inboundSchema: z.ZodNativeEnum<
  typeof RecordingResponseDtoOperatorType
> = z.nativeEnum(RecordingResponseDtoOperatorType);

/** @internal */
export const RecordingResponseDtoOperatorType$outboundSchema: z.ZodNativeEnum<
  typeof RecordingResponseDtoOperatorType
> = RecordingResponseDtoOperatorType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecordingResponseDtoOperatorType$ {
  /** @deprecated use `RecordingResponseDtoOperatorType$inboundSchema` instead. */
  export const inboundSchema = RecordingResponseDtoOperatorType$inboundSchema;
  /** @deprecated use `RecordingResponseDtoOperatorType$outboundSchema` instead. */
  export const outboundSchema = RecordingResponseDtoOperatorType$outboundSchema;
}

/** @internal */
export const RecordingResponseDtoVideoGenerationStatus$inboundSchema:
  z.ZodNativeEnum<typeof RecordingResponseDtoVideoGenerationStatus> = z
    .nativeEnum(RecordingResponseDtoVideoGenerationStatus);

/** @internal */
export const RecordingResponseDtoVideoGenerationStatus$outboundSchema:
  z.ZodNativeEnum<typeof RecordingResponseDtoVideoGenerationStatus> =
    RecordingResponseDtoVideoGenerationStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecordingResponseDtoVideoGenerationStatus$ {
  /** @deprecated use `RecordingResponseDtoVideoGenerationStatus$inboundSchema` instead. */
  export const inboundSchema =
    RecordingResponseDtoVideoGenerationStatus$inboundSchema;
  /** @deprecated use `RecordingResponseDtoVideoGenerationStatus$outboundSchema` instead. */
  export const outboundSchema =
    RecordingResponseDtoVideoGenerationStatus$outboundSchema;
}

/** @internal */
export const Recording$inboundSchema: z.ZodType<
  Recording,
  z.ZodTypeDef,
  unknown
> = collectExtraKeys$(
  z.object({
    id: z.string(),
    sessionId: z.string(),
    title: z.string(),
    description: z.string().optional(),
    createdAt: z.number(),
    duration: z.number(),
    frameCount: z.number(),
    thumbnailPath: z.string().optional(),
    filePath: z.string(),
    size: z.number(),
    operatorType: RecordingResponseDtoOperatorType$inboundSchema.optional(),
    videoGenerationStatus:
      RecordingResponseDtoVideoGenerationStatus$inboundSchema.optional(),
    videoGenerationStartedAt: z.number().optional(),
    videoGenerationCompletedAt: z.number().optional(),
    videoGenerationError: z.string().optional(),
    hasVideo: z.boolean().optional(),
    videoPath: z.string().optional(),
    videoFormat: z.string().optional(),
    videoSize: z.number().optional(),
  }).catchall(z.any()),
  "additionalProperties",
);

/** @internal */
export type Recording$Outbound = {
  id: string;
  sessionId: string;
  title: string;
  description?: string | undefined;
  createdAt: number;
  duration: number;
  frameCount: number;
  thumbnailPath?: string | undefined;
  filePath: string;
  size: number;
  operatorType?: string | undefined;
  videoGenerationStatus?: string | undefined;
  videoGenerationStartedAt?: number | undefined;
  videoGenerationCompletedAt?: number | undefined;
  videoGenerationError?: string | undefined;
  hasVideo?: boolean | undefined;
  videoPath?: string | undefined;
  videoFormat?: string | undefined;
  videoSize?: number | undefined;
  [additionalProperties: string]: unknown;
};

/** @internal */
export const Recording$outboundSchema: z.ZodType<
  Recording$Outbound,
  z.ZodTypeDef,
  Recording
> = z.object({
  id: z.string(),
  sessionId: z.string(),
  title: z.string(),
  description: z.string().optional(),
  createdAt: z.number(),
  duration: z.number(),
  frameCount: z.number(),
  thumbnailPath: z.string().optional(),
  filePath: z.string(),
  size: z.number(),
  operatorType: RecordingResponseDtoOperatorType$outboundSchema.optional(),
  videoGenerationStatus:
    RecordingResponseDtoVideoGenerationStatus$outboundSchema.optional(),
  videoGenerationStartedAt: z.number().optional(),
  videoGenerationCompletedAt: z.number().optional(),
  videoGenerationError: z.string().optional(),
  hasVideo: z.boolean().optional(),
  videoPath: z.string().optional(),
  videoFormat: z.string().optional(),
  videoSize: z.number().optional(),
  additionalProperties: z.record(z.any()),
}).transform((v) => {
  return {
    ...v.additionalProperties,
    ...remap$(v, {
      additionalProperties: null,
    }),
  };
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Recording$ {
  /** @deprecated use `Recording$inboundSchema` instead. */
  export const inboundSchema = Recording$inboundSchema;
  /** @deprecated use `Recording$outboundSchema` instead. */
  export const outboundSchema = Recording$outboundSchema;
  /** @deprecated use `Recording$Outbound` instead. */
  export type Outbound = Recording$Outbound;
}

export function recordingToJSON(recording: Recording): string {
  return JSON.stringify(Recording$outboundSchema.parse(recording));
}

export function recordingFromJSON(
  jsonString: string,
): SafeParseResult<Recording, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Recording$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Recording' from JSON`,
  );
}

/** @internal */
export const RecordingResponseDto$inboundSchema: z.ZodType<
  RecordingResponseDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  success: z.boolean(),
  recording: z.lazy(() => Recording$inboundSchema),
});

/** @internal */
export type RecordingResponseDto$Outbound = {
  success: boolean;
  recording: Recording$Outbound;
};

/** @internal */
export const RecordingResponseDto$outboundSchema: z.ZodType<
  RecordingResponseDto$Outbound,
  z.ZodTypeDef,
  RecordingResponseDto
> = z.object({
  success: z.boolean(),
  recording: z.lazy(() => Recording$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecordingResponseDto$ {
  /** @deprecated use `RecordingResponseDto$inboundSchema` instead. */
  export const inboundSchema = RecordingResponseDto$inboundSchema;
  /** @deprecated use `RecordingResponseDto$outboundSchema` instead. */
  export const outboundSchema = RecordingResponseDto$outboundSchema;
  /** @deprecated use `RecordingResponseDto$Outbound` instead. */
  export type Outbound = RecordingResponseDto$Outbound;
}

export function recordingResponseDtoToJSON(
  recordingResponseDto: RecordingResponseDto,
): string {
  return JSON.stringify(
    RecordingResponseDto$outboundSchema.parse(recordingResponseDto),
  );
}

export function recordingResponseDtoFromJSON(
  jsonString: string,
): SafeParseResult<RecordingResponseDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RecordingResponseDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RecordingResponseDto' from JSON`,
  );
}
