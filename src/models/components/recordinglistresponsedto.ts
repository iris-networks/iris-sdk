/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  VideoRecordingDto,
  VideoRecordingDto$inboundSchema,
  VideoRecordingDto$Outbound,
  VideoRecordingDto$outboundSchema,
} from "./videorecordingdto.js";

export type RecordingListResponseDto = {
  /**
   * List of recordings
   */
  recordings: Array<VideoRecordingDto>;
};

/** @internal */
export const RecordingListResponseDto$inboundSchema: z.ZodType<
  RecordingListResponseDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  recordings: z.array(VideoRecordingDto$inboundSchema),
});

/** @internal */
export type RecordingListResponseDto$Outbound = {
  recordings: Array<VideoRecordingDto$Outbound>;
};

/** @internal */
export const RecordingListResponseDto$outboundSchema: z.ZodType<
  RecordingListResponseDto$Outbound,
  z.ZodTypeDef,
  RecordingListResponseDto
> = z.object({
  recordings: z.array(VideoRecordingDto$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecordingListResponseDto$ {
  /** @deprecated use `RecordingListResponseDto$inboundSchema` instead. */
  export const inboundSchema = RecordingListResponseDto$inboundSchema;
  /** @deprecated use `RecordingListResponseDto$outboundSchema` instead. */
  export const outboundSchema = RecordingListResponseDto$outboundSchema;
  /** @deprecated use `RecordingListResponseDto$Outbound` instead. */
  export type Outbound = RecordingListResponseDto$Outbound;
}

export function recordingListResponseDtoToJSON(
  recordingListResponseDto: RecordingListResponseDto,
): string {
  return JSON.stringify(
    RecordingListResponseDto$outboundSchema.parse(recordingListResponseDto),
  );
}

export function recordingListResponseDtoFromJSON(
  jsonString: string,
): SafeParseResult<RecordingListResponseDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RecordingListResponseDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RecordingListResponseDto' from JSON`,
  );
}
