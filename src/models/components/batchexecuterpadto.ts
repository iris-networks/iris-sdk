/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type BatchExecuteRpaDto = {
  /**
   * The ID of the recording containing caption data
   */
  recordingId: string;
  /**
   * Optional delay between actions in milliseconds
   */
  actionDelay?: number | undefined;
  /**
   * Parameter sets for batch execution
   */
  parameterSets: Array<string>;
};

/** @internal */
export const BatchExecuteRpaDto$inboundSchema: z.ZodType<
  BatchExecuteRpaDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  recordingId: z.string(),
  actionDelay: z.number().default(1000),
  parameterSets: z.array(z.string()),
});

/** @internal */
export type BatchExecuteRpaDto$Outbound = {
  recordingId: string;
  actionDelay: number;
  parameterSets: Array<string>;
};

/** @internal */
export const BatchExecuteRpaDto$outboundSchema: z.ZodType<
  BatchExecuteRpaDto$Outbound,
  z.ZodTypeDef,
  BatchExecuteRpaDto
> = z.object({
  recordingId: z.string(),
  actionDelay: z.number().default(1000),
  parameterSets: z.array(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BatchExecuteRpaDto$ {
  /** @deprecated use `BatchExecuteRpaDto$inboundSchema` instead. */
  export const inboundSchema = BatchExecuteRpaDto$inboundSchema;
  /** @deprecated use `BatchExecuteRpaDto$outboundSchema` instead. */
  export const outboundSchema = BatchExecuteRpaDto$outboundSchema;
  /** @deprecated use `BatchExecuteRpaDto$Outbound` instead. */
  export type Outbound = BatchExecuteRpaDto$Outbound;
}

export function batchExecuteRpaDtoToJSON(
  batchExecuteRpaDto: BatchExecuteRpaDto,
): string {
  return JSON.stringify(
    BatchExecuteRpaDto$outboundSchema.parse(batchExecuteRpaDto),
  );
}

export function batchExecuteRpaDtoFromJSON(
  jsonString: string,
): SafeParseResult<BatchExecuteRpaDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BatchExecuteRpaDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BatchExecuteRpaDto' from JSON`,
  );
}
