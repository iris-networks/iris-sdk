/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Status of video generation
 */
export const Status = {
  Pending: "pending",
  InProgress: "in_progress",
  Completed: "completed",
  Failed: "failed",
} as const;
/**
 * Status of video generation
 */
export type Status = ClosedEnum<typeof Status>;

export type VideoStatusResponseDto = {
  /**
   * ID of the recording
   */
  recordingId: string;
  /**
   * Whether the recording has a video file
   */
  hasVideo: boolean;
  /**
   * Status of video generation
   */
  status: Status;
  /**
   * Human-readable status message
   */
  message: string;
  /**
   * Timestamp when video generation started (if in progress or completed)
   */
  startedAt?: number | undefined;
  /**
   * Timestamp when video generation completed (if completed)
   */
  completedAt?: number | undefined;
  /**
   * Elapsed time in seconds since generation started (if in progress)
   */
  elapsedSeconds?: number | undefined;
  /**
   * Video format (if completed)
   */
  format?: string | undefined;
  /**
   * Video size in MB (if completed)
   */
  sizeMB?: number | undefined;
  /**
   * Error message (if failed)
   */
  error?: string | undefined;
};

/** @internal */
export const Status$inboundSchema: z.ZodNativeEnum<typeof Status> = z
  .nativeEnum(Status);

/** @internal */
export const Status$outboundSchema: z.ZodNativeEnum<typeof Status> =
  Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Status$ {
  /** @deprecated use `Status$inboundSchema` instead. */
  export const inboundSchema = Status$inboundSchema;
  /** @deprecated use `Status$outboundSchema` instead. */
  export const outboundSchema = Status$outboundSchema;
}

/** @internal */
export const VideoStatusResponseDto$inboundSchema: z.ZodType<
  VideoStatusResponseDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  recordingId: z.string(),
  hasVideo: z.boolean(),
  status: Status$inboundSchema,
  message: z.string(),
  startedAt: z.number().optional(),
  completedAt: z.number().optional(),
  elapsedSeconds: z.number().optional(),
  format: z.string().optional(),
  sizeMB: z.number().optional(),
  error: z.string().optional(),
});

/** @internal */
export type VideoStatusResponseDto$Outbound = {
  recordingId: string;
  hasVideo: boolean;
  status: string;
  message: string;
  startedAt?: number | undefined;
  completedAt?: number | undefined;
  elapsedSeconds?: number | undefined;
  format?: string | undefined;
  sizeMB?: number | undefined;
  error?: string | undefined;
};

/** @internal */
export const VideoStatusResponseDto$outboundSchema: z.ZodType<
  VideoStatusResponseDto$Outbound,
  z.ZodTypeDef,
  VideoStatusResponseDto
> = z.object({
  recordingId: z.string(),
  hasVideo: z.boolean(),
  status: Status$outboundSchema,
  message: z.string(),
  startedAt: z.number().optional(),
  completedAt: z.number().optional(),
  elapsedSeconds: z.number().optional(),
  format: z.string().optional(),
  sizeMB: z.number().optional(),
  error: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VideoStatusResponseDto$ {
  /** @deprecated use `VideoStatusResponseDto$inboundSchema` instead. */
  export const inboundSchema = VideoStatusResponseDto$inboundSchema;
  /** @deprecated use `VideoStatusResponseDto$outboundSchema` instead. */
  export const outboundSchema = VideoStatusResponseDto$outboundSchema;
  /** @deprecated use `VideoStatusResponseDto$Outbound` instead. */
  export type Outbound = VideoStatusResponseDto$Outbound;
}

export function videoStatusResponseDtoToJSON(
  videoStatusResponseDto: VideoStatusResponseDto,
): string {
  return JSON.stringify(
    VideoStatusResponseDto$outboundSchema.parse(videoStatusResponseDto),
  );
}

export function videoStatusResponseDtoFromJSON(
  jsonString: string,
): SafeParseResult<VideoStatusResponseDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VideoStatusResponseDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VideoStatusResponseDto' from JSON`,
  );
}
