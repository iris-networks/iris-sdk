/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RpaStepsDto = {
  /**
   * Unique identifier for the analysis
   */
  analysisId: string;
  /**
   * Generated RPA steps for browser automation
   */
  rpaSteps: string;
  /**
   * URL to access the processed video
   */
  processedVideoUrl: string;
  /**
   * URL to access the original video
   */
  originalVideoUrl: string;
};

/** @internal */
export const RpaStepsDto$inboundSchema: z.ZodType<
  RpaStepsDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  analysisId: z.string(),
  rpaSteps: z.string(),
  processedVideoUrl: z.string(),
  originalVideoUrl: z.string(),
});

/** @internal */
export type RpaStepsDto$Outbound = {
  analysisId: string;
  rpaSteps: string;
  processedVideoUrl: string;
  originalVideoUrl: string;
};

/** @internal */
export const RpaStepsDto$outboundSchema: z.ZodType<
  RpaStepsDto$Outbound,
  z.ZodTypeDef,
  RpaStepsDto
> = z.object({
  analysisId: z.string(),
  rpaSteps: z.string(),
  processedVideoUrl: z.string(),
  originalVideoUrl: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RpaStepsDto$ {
  /** @deprecated use `RpaStepsDto$inboundSchema` instead. */
  export const inboundSchema = RpaStepsDto$inboundSchema;
  /** @deprecated use `RpaStepsDto$outboundSchema` instead. */
  export const outboundSchema = RpaStepsDto$outboundSchema;
  /** @deprecated use `RpaStepsDto$Outbound` instead. */
  export type Outbound = RpaStepsDto$Outbound;
}

export function rpaStepsDtoToJSON(rpaStepsDto: RpaStepsDto): string {
  return JSON.stringify(RpaStepsDto$outboundSchema.parse(rpaStepsDto));
}

export function rpaStepsDtoFromJSON(
  jsonString: string,
): SafeParseResult<RpaStepsDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RpaStepsDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RpaStepsDto' from JSON`,
  );
}
