/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Parameter template with parameterizable fields
 */
export type ParameterTemplate = {};

export type ParameterTemplateResponseDto = {
  /**
   * The ID of the recording
   */
  recordingId: string;
  /**
   * Parameter template with parameterizable fields
   */
  parameterTemplate: ParameterTemplate;
};

/** @internal */
export const ParameterTemplate$inboundSchema: z.ZodType<
  ParameterTemplate,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ParameterTemplate$Outbound = {};

/** @internal */
export const ParameterTemplate$outboundSchema: z.ZodType<
  ParameterTemplate$Outbound,
  z.ZodTypeDef,
  ParameterTemplate
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ParameterTemplate$ {
  /** @deprecated use `ParameterTemplate$inboundSchema` instead. */
  export const inboundSchema = ParameterTemplate$inboundSchema;
  /** @deprecated use `ParameterTemplate$outboundSchema` instead. */
  export const outboundSchema = ParameterTemplate$outboundSchema;
  /** @deprecated use `ParameterTemplate$Outbound` instead. */
  export type Outbound = ParameterTemplate$Outbound;
}

export function parameterTemplateToJSON(
  parameterTemplate: ParameterTemplate,
): string {
  return JSON.stringify(
    ParameterTemplate$outboundSchema.parse(parameterTemplate),
  );
}

export function parameterTemplateFromJSON(
  jsonString: string,
): SafeParseResult<ParameterTemplate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ParameterTemplate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ParameterTemplate' from JSON`,
  );
}

/** @internal */
export const ParameterTemplateResponseDto$inboundSchema: z.ZodType<
  ParameterTemplateResponseDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  recordingId: z.string(),
  parameterTemplate: z.lazy(() => ParameterTemplate$inboundSchema),
});

/** @internal */
export type ParameterTemplateResponseDto$Outbound = {
  recordingId: string;
  parameterTemplate: ParameterTemplate$Outbound;
};

/** @internal */
export const ParameterTemplateResponseDto$outboundSchema: z.ZodType<
  ParameterTemplateResponseDto$Outbound,
  z.ZodTypeDef,
  ParameterTemplateResponseDto
> = z.object({
  recordingId: z.string(),
  parameterTemplate: z.lazy(() => ParameterTemplate$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ParameterTemplateResponseDto$ {
  /** @deprecated use `ParameterTemplateResponseDto$inboundSchema` instead. */
  export const inboundSchema = ParameterTemplateResponseDto$inboundSchema;
  /** @deprecated use `ParameterTemplateResponseDto$outboundSchema` instead. */
  export const outboundSchema = ParameterTemplateResponseDto$outboundSchema;
  /** @deprecated use `ParameterTemplateResponseDto$Outbound` instead. */
  export type Outbound = ParameterTemplateResponseDto$Outbound;
}

export function parameterTemplateResponseDtoToJSON(
  parameterTemplateResponseDto: ParameterTemplateResponseDto,
): string {
  return JSON.stringify(
    ParameterTemplateResponseDto$outboundSchema.parse(
      parameterTemplateResponseDto,
    ),
  );
}

export function parameterTemplateResponseDtoFromJSON(
  jsonString: string,
): SafeParseResult<ParameterTemplateResponseDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ParameterTemplateResponseDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ParameterTemplateResponseDto' from JSON`,
  );
}
