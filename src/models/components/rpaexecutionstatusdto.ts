/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Current status of the execution
 */
export const RpaExecutionStatusDtoStatus = {
  Running: "running",
  Completed: "completed",
  Failed: "failed",
  Stopped: "stopped",
} as const;
/**
 * Current status of the execution
 */
export type RpaExecutionStatusDtoStatus = ClosedEnum<
  typeof RpaExecutionStatusDtoStatus
>;

/**
 * Operator type being used for execution
 */
export const RpaExecutionStatusDtoOperatorType = {
  Browser: "browser",
  Computer: "computer",
} as const;
/**
 * Operator type being used for execution
 */
export type RpaExecutionStatusDtoOperatorType = ClosedEnum<
  typeof RpaExecutionStatusDtoOperatorType
>;

export type RpaExecutionStatusDto = {
  /**
   * The ID of the RPA execution
   */
  executionId: string;
  /**
   * The ID of the recording being automated
   */
  recordingId: string;
  /**
   * Current status of the execution
   */
  status: RpaExecutionStatusDtoStatus;
  /**
   * Current action index being executed
   */
  currentActionIndex: number;
  /**
   * Total number of actions to execute
   */
  totalActions: number;
  /**
   * Timestamp when the execution started
   */
  startedAt: number;
  /**
   * Operator type being used for execution
   */
  operatorType: RpaExecutionStatusDtoOperatorType;
  /**
   * Error message if execution failed
   */
  errorMessage?: string | undefined;
};

/** @internal */
export const RpaExecutionStatusDtoStatus$inboundSchema: z.ZodNativeEnum<
  typeof RpaExecutionStatusDtoStatus
> = z.nativeEnum(RpaExecutionStatusDtoStatus);

/** @internal */
export const RpaExecutionStatusDtoStatus$outboundSchema: z.ZodNativeEnum<
  typeof RpaExecutionStatusDtoStatus
> = RpaExecutionStatusDtoStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RpaExecutionStatusDtoStatus$ {
  /** @deprecated use `RpaExecutionStatusDtoStatus$inboundSchema` instead. */
  export const inboundSchema = RpaExecutionStatusDtoStatus$inboundSchema;
  /** @deprecated use `RpaExecutionStatusDtoStatus$outboundSchema` instead. */
  export const outboundSchema = RpaExecutionStatusDtoStatus$outboundSchema;
}

/** @internal */
export const RpaExecutionStatusDtoOperatorType$inboundSchema: z.ZodNativeEnum<
  typeof RpaExecutionStatusDtoOperatorType
> = z.nativeEnum(RpaExecutionStatusDtoOperatorType);

/** @internal */
export const RpaExecutionStatusDtoOperatorType$outboundSchema: z.ZodNativeEnum<
  typeof RpaExecutionStatusDtoOperatorType
> = RpaExecutionStatusDtoOperatorType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RpaExecutionStatusDtoOperatorType$ {
  /** @deprecated use `RpaExecutionStatusDtoOperatorType$inboundSchema` instead. */
  export const inboundSchema = RpaExecutionStatusDtoOperatorType$inboundSchema;
  /** @deprecated use `RpaExecutionStatusDtoOperatorType$outboundSchema` instead. */
  export const outboundSchema =
    RpaExecutionStatusDtoOperatorType$outboundSchema;
}

/** @internal */
export const RpaExecutionStatusDto$inboundSchema: z.ZodType<
  RpaExecutionStatusDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  executionId: z.string(),
  recordingId: z.string(),
  status: RpaExecutionStatusDtoStatus$inboundSchema,
  currentActionIndex: z.number(),
  totalActions: z.number(),
  startedAt: z.number(),
  operatorType: RpaExecutionStatusDtoOperatorType$inboundSchema,
  errorMessage: z.string().optional(),
});

/** @internal */
export type RpaExecutionStatusDto$Outbound = {
  executionId: string;
  recordingId: string;
  status: string;
  currentActionIndex: number;
  totalActions: number;
  startedAt: number;
  operatorType: string;
  errorMessage?: string | undefined;
};

/** @internal */
export const RpaExecutionStatusDto$outboundSchema: z.ZodType<
  RpaExecutionStatusDto$Outbound,
  z.ZodTypeDef,
  RpaExecutionStatusDto
> = z.object({
  executionId: z.string(),
  recordingId: z.string(),
  status: RpaExecutionStatusDtoStatus$outboundSchema,
  currentActionIndex: z.number(),
  totalActions: z.number(),
  startedAt: z.number(),
  operatorType: RpaExecutionStatusDtoOperatorType$outboundSchema,
  errorMessage: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RpaExecutionStatusDto$ {
  /** @deprecated use `RpaExecutionStatusDto$inboundSchema` instead. */
  export const inboundSchema = RpaExecutionStatusDto$inboundSchema;
  /** @deprecated use `RpaExecutionStatusDto$outboundSchema` instead. */
  export const outboundSchema = RpaExecutionStatusDto$outboundSchema;
  /** @deprecated use `RpaExecutionStatusDto$Outbound` instead. */
  export type Outbound = RpaExecutionStatusDto$Outbound;
}

export function rpaExecutionStatusDtoToJSON(
  rpaExecutionStatusDto: RpaExecutionStatusDto,
): string {
  return JSON.stringify(
    RpaExecutionStatusDto$outboundSchema.parse(rpaExecutionStatusDto),
  );
}

export function rpaExecutionStatusDtoFromJSON(
  jsonString: string,
): SafeParseResult<RpaExecutionStatusDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RpaExecutionStatusDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RpaExecutionStatusDto' from JSON`,
  );
}
