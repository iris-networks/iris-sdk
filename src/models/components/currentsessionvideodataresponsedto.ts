/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CaptionDataDto,
  CaptionDataDto$inboundSchema,
  CaptionDataDto$Outbound,
  CaptionDataDto$outboundSchema,
} from "./captiondatadto.js";
import {
  VideoRecordingDto,
  VideoRecordingDto$inboundSchema,
  VideoRecordingDto$Outbound,
  VideoRecordingDto$outboundSchema,
} from "./videorecordingdto.js";

/**
 * Video data
 */
export type VideoData = {
  /**
   * Array of base64-encoded frames
   */
  frames: Array<string>;
  /**
   * Array of caption data
   */
  captions: Array<CaptionDataDto>;
  /**
   * Optional recording metadata
   */
  metadata?: VideoRecordingDto | undefined;
};

export type CurrentSessionVideoDataResponseDto = {
  /**
   * Whether the request was successful
   */
  success: boolean;
  /**
   * Video data
   */
  videoData: VideoData;
};

/** @internal */
export const VideoData$inboundSchema: z.ZodType<
  VideoData,
  z.ZodTypeDef,
  unknown
> = z.object({
  frames: z.array(z.string()),
  captions: z.array(CaptionDataDto$inboundSchema),
  metadata: VideoRecordingDto$inboundSchema.optional(),
});

/** @internal */
export type VideoData$Outbound = {
  frames: Array<string>;
  captions: Array<CaptionDataDto$Outbound>;
  metadata?: VideoRecordingDto$Outbound | undefined;
};

/** @internal */
export const VideoData$outboundSchema: z.ZodType<
  VideoData$Outbound,
  z.ZodTypeDef,
  VideoData
> = z.object({
  frames: z.array(z.string()),
  captions: z.array(CaptionDataDto$outboundSchema),
  metadata: VideoRecordingDto$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VideoData$ {
  /** @deprecated use `VideoData$inboundSchema` instead. */
  export const inboundSchema = VideoData$inboundSchema;
  /** @deprecated use `VideoData$outboundSchema` instead. */
  export const outboundSchema = VideoData$outboundSchema;
  /** @deprecated use `VideoData$Outbound` instead. */
  export type Outbound = VideoData$Outbound;
}

export function videoDataToJSON(videoData: VideoData): string {
  return JSON.stringify(VideoData$outboundSchema.parse(videoData));
}

export function videoDataFromJSON(
  jsonString: string,
): SafeParseResult<VideoData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VideoData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VideoData' from JSON`,
  );
}

/** @internal */
export const CurrentSessionVideoDataResponseDto$inboundSchema: z.ZodType<
  CurrentSessionVideoDataResponseDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  success: z.boolean(),
  videoData: z.lazy(() => VideoData$inboundSchema),
});

/** @internal */
export type CurrentSessionVideoDataResponseDto$Outbound = {
  success: boolean;
  videoData: VideoData$Outbound;
};

/** @internal */
export const CurrentSessionVideoDataResponseDto$outboundSchema: z.ZodType<
  CurrentSessionVideoDataResponseDto$Outbound,
  z.ZodTypeDef,
  CurrentSessionVideoDataResponseDto
> = z.object({
  success: z.boolean(),
  videoData: z.lazy(() => VideoData$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CurrentSessionVideoDataResponseDto$ {
  /** @deprecated use `CurrentSessionVideoDataResponseDto$inboundSchema` instead. */
  export const inboundSchema = CurrentSessionVideoDataResponseDto$inboundSchema;
  /** @deprecated use `CurrentSessionVideoDataResponseDto$outboundSchema` instead. */
  export const outboundSchema =
    CurrentSessionVideoDataResponseDto$outboundSchema;
  /** @deprecated use `CurrentSessionVideoDataResponseDto$Outbound` instead. */
  export type Outbound = CurrentSessionVideoDataResponseDto$Outbound;
}

export function currentSessionVideoDataResponseDtoToJSON(
  currentSessionVideoDataResponseDto: CurrentSessionVideoDataResponseDto,
): string {
  return JSON.stringify(
    CurrentSessionVideoDataResponseDto$outboundSchema.parse(
      currentSessionVideoDataResponseDto,
    ),
  );
}

export function currentSessionVideoDataResponseDtoFromJSON(
  jsonString: string,
): SafeParseResult<CurrentSessionVideoDataResponseDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CurrentSessionVideoDataResponseDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CurrentSessionVideoDataResponseDto' from JSON`,
  );
}
