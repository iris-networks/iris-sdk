/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type VideoAnalysisResponseDto = {
  /**
   * Unique identifier for the analysis
   */
  analysisId: string;
  /**
   * Original uploaded video filename
   */
  originalVideo: string;
  /**
   * Processed video filename with idle sections removed
   */
  processedVideo: string;
  /**
   * Status message
   */
  message: string;
};

/** @internal */
export const VideoAnalysisResponseDto$inboundSchema: z.ZodType<
  VideoAnalysisResponseDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  analysisId: z.string(),
  originalVideo: z.string(),
  processedVideo: z.string(),
  message: z.string(),
});

/** @internal */
export type VideoAnalysisResponseDto$Outbound = {
  analysisId: string;
  originalVideo: string;
  processedVideo: string;
  message: string;
};

/** @internal */
export const VideoAnalysisResponseDto$outboundSchema: z.ZodType<
  VideoAnalysisResponseDto$Outbound,
  z.ZodTypeDef,
  VideoAnalysisResponseDto
> = z.object({
  analysisId: z.string(),
  originalVideo: z.string(),
  processedVideo: z.string(),
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VideoAnalysisResponseDto$ {
  /** @deprecated use `VideoAnalysisResponseDto$inboundSchema` instead. */
  export const inboundSchema = VideoAnalysisResponseDto$inboundSchema;
  /** @deprecated use `VideoAnalysisResponseDto$outboundSchema` instead. */
  export const outboundSchema = VideoAnalysisResponseDto$outboundSchema;
  /** @deprecated use `VideoAnalysisResponseDto$Outbound` instead. */
  export type Outbound = VideoAnalysisResponseDto$Outbound;
}

export function videoAnalysisResponseDtoToJSON(
  videoAnalysisResponseDto: VideoAnalysisResponseDto,
): string {
  return JSON.stringify(
    VideoAnalysisResponseDto$outboundSchema.parse(videoAnalysisResponseDto),
  );
}

export function videoAnalysisResponseDtoFromJSON(
  jsonString: string,
): SafeParseResult<VideoAnalysisResponseDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VideoAnalysisResponseDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VideoAnalysisResponseDto' from JSON`,
  );
}
