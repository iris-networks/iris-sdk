/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ArtifactItemDto,
  ArtifactItemDto$inboundSchema,
  ArtifactItemDto$Outbound,
  ArtifactItemDto$outboundSchema,
} from "./artifactitemdto.js";

export type ArtifactsContentDto = {
  /**
   * Current path being listed
   */
  currentPath: string;
  /**
   * Parent path if available
   */
  parentPath?: string | undefined;
  /**
   * List of files and directories
   */
  items: Array<ArtifactItemDto>;
};

/** @internal */
export const ArtifactsContentDto$inboundSchema: z.ZodType<
  ArtifactsContentDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  currentPath: z.string(),
  parentPath: z.string().optional(),
  items: z.array(ArtifactItemDto$inboundSchema),
});

/** @internal */
export type ArtifactsContentDto$Outbound = {
  currentPath: string;
  parentPath?: string | undefined;
  items: Array<ArtifactItemDto$Outbound>;
};

/** @internal */
export const ArtifactsContentDto$outboundSchema: z.ZodType<
  ArtifactsContentDto$Outbound,
  z.ZodTypeDef,
  ArtifactsContentDto
> = z.object({
  currentPath: z.string(),
  parentPath: z.string().optional(),
  items: z.array(ArtifactItemDto$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ArtifactsContentDto$ {
  /** @deprecated use `ArtifactsContentDto$inboundSchema` instead. */
  export const inboundSchema = ArtifactsContentDto$inboundSchema;
  /** @deprecated use `ArtifactsContentDto$outboundSchema` instead. */
  export const outboundSchema = ArtifactsContentDto$outboundSchema;
  /** @deprecated use `ArtifactsContentDto$Outbound` instead. */
  export type Outbound = ArtifactsContentDto$Outbound;
}

export function artifactsContentDtoToJSON(
  artifactsContentDto: ArtifactsContentDto,
): string {
  return JSON.stringify(
    ArtifactsContentDto$outboundSchema.parse(artifactsContentDto),
  );
}

export function artifactsContentDtoFromJSON(
  jsonString: string,
): SafeParseResult<ArtifactsContentDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ArtifactsContentDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ArtifactsContentDto' from JSON`,
  );
}
