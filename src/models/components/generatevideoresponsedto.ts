/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import {
  collectExtraKeys as collectExtraKeys$,
  safeParse,
} from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Operator type used for the session
 */
export const GenerateVideoResponseDtoOperatorType = {
  Browser: "browser",
  Computer: "computer",
} as const;
/**
 * Operator type used for the session
 */
export type GenerateVideoResponseDtoOperatorType = ClosedEnum<
  typeof GenerateVideoResponseDtoOperatorType
>;

/**
 * Status of video generation
 */
export const GenerateVideoResponseDtoVideoGenerationStatus = {
  Pending: "pending",
  InProgress: "in_progress",
  Completed: "completed",
  Failed: "failed",
} as const;
/**
 * Status of video generation
 */
export type GenerateVideoResponseDtoVideoGenerationStatus = ClosedEnum<
  typeof GenerateVideoResponseDtoVideoGenerationStatus
>;

/**
 * Recording metadata after video generation
 */
export type GenerateVideoResponseDtoRecording = {
  /**
   * Unique identifier for the recording
   */
  id: string;
  /**
   * Session ID this recording belongs to
   */
  sessionId: string;
  /**
   * Title of the recording
   */
  title: string;
  /**
   * Description of the recording
   */
  description?: string | undefined;
  /**
   * Timestamp when the recording was created
   */
  createdAt: number;
  /**
   * Duration of the recording in milliseconds
   */
  duration: number;
  /**
   * Number of frames in the recording
   */
  frameCount: number;
  /**
   * Path to the thumbnail image
   */
  thumbnailPath?: string | undefined;
  /**
   * Path to the recording files
   */
  filePath: string;
  /**
   * Size of the recording in bytes
   */
  size: number;
  /**
   * Operator type used for the session
   */
  operatorType?: GenerateVideoResponseDtoOperatorType | undefined;
  /**
   * Status of video generation
   */
  videoGenerationStatus?:
    | GenerateVideoResponseDtoVideoGenerationStatus
    | undefined;
  /**
   * Timestamp when video generation started
   */
  videoGenerationStartedAt?: number | undefined;
  /**
   * Timestamp when video generation completed
   */
  videoGenerationCompletedAt?: number | undefined;
  /**
   * Error message if video generation failed
   */
  videoGenerationError?: string | undefined;
  /**
   * Whether the recording has a video
   */
  hasVideo?: boolean | undefined;
  /**
   * Path to the generated video file
   */
  videoPath?: string | undefined;
  /**
   * Format of the generated video
   */
  videoFormat?: string | undefined;
  /**
   * Size of the generated video in bytes
   */
  videoSize?: number | undefined;
  additionalProperties?: { [k: string]: any };
};

export type GenerateVideoResponseDto = {
  /**
   * Whether the video generation was successful
   */
  success: boolean;
  /**
   * Path to the generated video file
   */
  videoPath: string;
  /**
   * Recording metadata after video generation
   */
  recording: GenerateVideoResponseDtoRecording;
};

/** @internal */
export const GenerateVideoResponseDtoOperatorType$inboundSchema:
  z.ZodNativeEnum<typeof GenerateVideoResponseDtoOperatorType> = z.nativeEnum(
    GenerateVideoResponseDtoOperatorType,
  );

/** @internal */
export const GenerateVideoResponseDtoOperatorType$outboundSchema:
  z.ZodNativeEnum<typeof GenerateVideoResponseDtoOperatorType> =
    GenerateVideoResponseDtoOperatorType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GenerateVideoResponseDtoOperatorType$ {
  /** @deprecated use `GenerateVideoResponseDtoOperatorType$inboundSchema` instead. */
  export const inboundSchema =
    GenerateVideoResponseDtoOperatorType$inboundSchema;
  /** @deprecated use `GenerateVideoResponseDtoOperatorType$outboundSchema` instead. */
  export const outboundSchema =
    GenerateVideoResponseDtoOperatorType$outboundSchema;
}

/** @internal */
export const GenerateVideoResponseDtoVideoGenerationStatus$inboundSchema:
  z.ZodNativeEnum<typeof GenerateVideoResponseDtoVideoGenerationStatus> = z
    .nativeEnum(GenerateVideoResponseDtoVideoGenerationStatus);

/** @internal */
export const GenerateVideoResponseDtoVideoGenerationStatus$outboundSchema:
  z.ZodNativeEnum<typeof GenerateVideoResponseDtoVideoGenerationStatus> =
    GenerateVideoResponseDtoVideoGenerationStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GenerateVideoResponseDtoVideoGenerationStatus$ {
  /** @deprecated use `GenerateVideoResponseDtoVideoGenerationStatus$inboundSchema` instead. */
  export const inboundSchema =
    GenerateVideoResponseDtoVideoGenerationStatus$inboundSchema;
  /** @deprecated use `GenerateVideoResponseDtoVideoGenerationStatus$outboundSchema` instead. */
  export const outboundSchema =
    GenerateVideoResponseDtoVideoGenerationStatus$outboundSchema;
}

/** @internal */
export const GenerateVideoResponseDtoRecording$inboundSchema: z.ZodType<
  GenerateVideoResponseDtoRecording,
  z.ZodTypeDef,
  unknown
> = collectExtraKeys$(
  z.object({
    id: z.string(),
    sessionId: z.string(),
    title: z.string(),
    description: z.string().optional(),
    createdAt: z.number(),
    duration: z.number(),
    frameCount: z.number(),
    thumbnailPath: z.string().optional(),
    filePath: z.string(),
    size: z.number(),
    operatorType: GenerateVideoResponseDtoOperatorType$inboundSchema.optional(),
    videoGenerationStatus:
      GenerateVideoResponseDtoVideoGenerationStatus$inboundSchema.optional(),
    videoGenerationStartedAt: z.number().optional(),
    videoGenerationCompletedAt: z.number().optional(),
    videoGenerationError: z.string().optional(),
    hasVideo: z.boolean().optional(),
    videoPath: z.string().optional(),
    videoFormat: z.string().optional(),
    videoSize: z.number().optional(),
  }).catchall(z.any()),
  "additionalProperties",
  true,
);

/** @internal */
export type GenerateVideoResponseDtoRecording$Outbound = {
  id: string;
  sessionId: string;
  title: string;
  description?: string | undefined;
  createdAt: number;
  duration: number;
  frameCount: number;
  thumbnailPath?: string | undefined;
  filePath: string;
  size: number;
  operatorType?: string | undefined;
  videoGenerationStatus?: string | undefined;
  videoGenerationStartedAt?: number | undefined;
  videoGenerationCompletedAt?: number | undefined;
  videoGenerationError?: string | undefined;
  hasVideo?: boolean | undefined;
  videoPath?: string | undefined;
  videoFormat?: string | undefined;
  videoSize?: number | undefined;
  [additionalProperties: string]: unknown;
};

/** @internal */
export const GenerateVideoResponseDtoRecording$outboundSchema: z.ZodType<
  GenerateVideoResponseDtoRecording$Outbound,
  z.ZodTypeDef,
  GenerateVideoResponseDtoRecording
> = z.object({
  id: z.string(),
  sessionId: z.string(),
  title: z.string(),
  description: z.string().optional(),
  createdAt: z.number(),
  duration: z.number(),
  frameCount: z.number(),
  thumbnailPath: z.string().optional(),
  filePath: z.string(),
  size: z.number(),
  operatorType: GenerateVideoResponseDtoOperatorType$outboundSchema.optional(),
  videoGenerationStatus:
    GenerateVideoResponseDtoVideoGenerationStatus$outboundSchema.optional(),
  videoGenerationStartedAt: z.number().optional(),
  videoGenerationCompletedAt: z.number().optional(),
  videoGenerationError: z.string().optional(),
  hasVideo: z.boolean().optional(),
  videoPath: z.string().optional(),
  videoFormat: z.string().optional(),
  videoSize: z.number().optional(),
  additionalProperties: z.record(z.any()),
}).transform((v) => {
  return {
    ...v.additionalProperties,
    ...remap$(v, {
      additionalProperties: null,
    }),
  };
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GenerateVideoResponseDtoRecording$ {
  /** @deprecated use `GenerateVideoResponseDtoRecording$inboundSchema` instead. */
  export const inboundSchema = GenerateVideoResponseDtoRecording$inboundSchema;
  /** @deprecated use `GenerateVideoResponseDtoRecording$outboundSchema` instead. */
  export const outboundSchema =
    GenerateVideoResponseDtoRecording$outboundSchema;
  /** @deprecated use `GenerateVideoResponseDtoRecording$Outbound` instead. */
  export type Outbound = GenerateVideoResponseDtoRecording$Outbound;
}

export function generateVideoResponseDtoRecordingToJSON(
  generateVideoResponseDtoRecording: GenerateVideoResponseDtoRecording,
): string {
  return JSON.stringify(
    GenerateVideoResponseDtoRecording$outboundSchema.parse(
      generateVideoResponseDtoRecording,
    ),
  );
}

export function generateVideoResponseDtoRecordingFromJSON(
  jsonString: string,
): SafeParseResult<GenerateVideoResponseDtoRecording, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GenerateVideoResponseDtoRecording$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GenerateVideoResponseDtoRecording' from JSON`,
  );
}

/** @internal */
export const GenerateVideoResponseDto$inboundSchema: z.ZodType<
  GenerateVideoResponseDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  success: z.boolean(),
  videoPath: z.string(),
  recording: z.lazy(() => GenerateVideoResponseDtoRecording$inboundSchema),
});

/** @internal */
export type GenerateVideoResponseDto$Outbound = {
  success: boolean;
  videoPath: string;
  recording: GenerateVideoResponseDtoRecording$Outbound;
};

/** @internal */
export const GenerateVideoResponseDto$outboundSchema: z.ZodType<
  GenerateVideoResponseDto$Outbound,
  z.ZodTypeDef,
  GenerateVideoResponseDto
> = z.object({
  success: z.boolean(),
  videoPath: z.string(),
  recording: z.lazy(() => GenerateVideoResponseDtoRecording$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GenerateVideoResponseDto$ {
  /** @deprecated use `GenerateVideoResponseDto$inboundSchema` instead. */
  export const inboundSchema = GenerateVideoResponseDto$inboundSchema;
  /** @deprecated use `GenerateVideoResponseDto$outboundSchema` instead. */
  export const outboundSchema = GenerateVideoResponseDto$outboundSchema;
  /** @deprecated use `GenerateVideoResponseDto$Outbound` instead. */
  export type Outbound = GenerateVideoResponseDto$Outbound;
}

export function generateVideoResponseDtoToJSON(
  generateVideoResponseDto: GenerateVideoResponseDto,
): string {
  return JSON.stringify(
    GenerateVideoResponseDto$outboundSchema.parse(generateVideoResponseDto),
  );
}

export function generateVideoResponseDtoFromJSON(
  jsonString: string,
): SafeParseResult<GenerateVideoResponseDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GenerateVideoResponseDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GenerateVideoResponseDto' from JSON`,
  );
}
