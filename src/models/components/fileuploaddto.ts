/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { blobLikeSchema } from "../../types/blobs.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type FileUploadDtoFile = {
  fileName: string;
  content: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array;
};

export type FileUploadDto = {
  /**
   * File to upload
   */
  file: FileUploadDtoFile | Blob;
};

/** @internal */
export const FileUploadDtoFile$inboundSchema: z.ZodType<
  FileUploadDtoFile,
  z.ZodTypeDef,
  unknown
> = z.object({
  fileName: z.string(),
  content: z.union([
    z.instanceof(ReadableStream<Uint8Array>),
    z.instanceof(Blob),
    z.instanceof(ArrayBuffer),
    z.instanceof(Uint8Array),
  ]),
});

/** @internal */
export type FileUploadDtoFile$Outbound = {
  fileName: string;
  content: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array;
};

/** @internal */
export const FileUploadDtoFile$outboundSchema: z.ZodType<
  FileUploadDtoFile$Outbound,
  z.ZodTypeDef,
  FileUploadDtoFile
> = z.object({
  fileName: z.string(),
  content: z.union([
    z.instanceof(ReadableStream<Uint8Array>),
    z.instanceof(Blob),
    z.instanceof(ArrayBuffer),
    z.instanceof(Uint8Array),
  ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FileUploadDtoFile$ {
  /** @deprecated use `FileUploadDtoFile$inboundSchema` instead. */
  export const inboundSchema = FileUploadDtoFile$inboundSchema;
  /** @deprecated use `FileUploadDtoFile$outboundSchema` instead. */
  export const outboundSchema = FileUploadDtoFile$outboundSchema;
  /** @deprecated use `FileUploadDtoFile$Outbound` instead. */
  export type Outbound = FileUploadDtoFile$Outbound;
}

export function fileUploadDtoFileToJSON(
  fileUploadDtoFile: FileUploadDtoFile,
): string {
  return JSON.stringify(
    FileUploadDtoFile$outboundSchema.parse(fileUploadDtoFile),
  );
}

export function fileUploadDtoFileFromJSON(
  jsonString: string,
): SafeParseResult<FileUploadDtoFile, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FileUploadDtoFile$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FileUploadDtoFile' from JSON`,
  );
}

/** @internal */
export const FileUploadDto$inboundSchema: z.ZodType<
  FileUploadDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  file: z.lazy(() => FileUploadDtoFile$inboundSchema),
});

/** @internal */
export type FileUploadDto$Outbound = {
  file: FileUploadDtoFile$Outbound | Blob;
};

/** @internal */
export const FileUploadDto$outboundSchema: z.ZodType<
  FileUploadDto$Outbound,
  z.ZodTypeDef,
  FileUploadDto
> = z.object({
  file: z.lazy(() => FileUploadDtoFile$outboundSchema).or(blobLikeSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FileUploadDto$ {
  /** @deprecated use `FileUploadDto$inboundSchema` instead. */
  export const inboundSchema = FileUploadDto$inboundSchema;
  /** @deprecated use `FileUploadDto$outboundSchema` instead. */
  export const outboundSchema = FileUploadDto$outboundSchema;
  /** @deprecated use `FileUploadDto$Outbound` instead. */
  export type Outbound = FileUploadDto$Outbound;
}

export function fileUploadDtoToJSON(fileUploadDto: FileUploadDto): string {
  return JSON.stringify(FileUploadDto$outboundSchema.parse(fileUploadDto));
}

export function fileUploadDtoFromJSON(
  jsonString: string,
): SafeParseResult<FileUploadDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FileUploadDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FileUploadDto' from JSON`,
  );
}
