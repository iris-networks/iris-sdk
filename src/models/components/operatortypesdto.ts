/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const Types = {
  Browser: "browser",
  Computer: "computer",
} as const;
export type Types = ClosedEnum<typeof Types>;

export type OperatorTypesDto = {
  /**
   * List of available operator types
   */
  types: Array<Types>;
};

/** @internal */
export const Types$inboundSchema: z.ZodNativeEnum<typeof Types> = z.nativeEnum(
  Types,
);

/** @internal */
export const Types$outboundSchema: z.ZodNativeEnum<typeof Types> =
  Types$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Types$ {
  /** @deprecated use `Types$inboundSchema` instead. */
  export const inboundSchema = Types$inboundSchema;
  /** @deprecated use `Types$outboundSchema` instead. */
  export const outboundSchema = Types$outboundSchema;
}

/** @internal */
export const OperatorTypesDto$inboundSchema: z.ZodType<
  OperatorTypesDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  types: z.array(Types$inboundSchema),
});

/** @internal */
export type OperatorTypesDto$Outbound = {
  types: Array<string>;
};

/** @internal */
export const OperatorTypesDto$outboundSchema: z.ZodType<
  OperatorTypesDto$Outbound,
  z.ZodTypeDef,
  OperatorTypesDto
> = z.object({
  types: z.array(Types$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OperatorTypesDto$ {
  /** @deprecated use `OperatorTypesDto$inboundSchema` instead. */
  export const inboundSchema = OperatorTypesDto$inboundSchema;
  /** @deprecated use `OperatorTypesDto$outboundSchema` instead. */
  export const outboundSchema = OperatorTypesDto$outboundSchema;
  /** @deprecated use `OperatorTypesDto$Outbound` instead. */
  export type Outbound = OperatorTypesDto$Outbound;
}

export function operatorTypesDtoToJSON(
  operatorTypesDto: OperatorTypesDto,
): string {
  return JSON.stringify(
    OperatorTypesDto$outboundSchema.parse(operatorTypesDto),
  );
}

export function operatorTypesDtoFromJSON(
  jsonString: string,
): SafeParseResult<OperatorTypesDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OperatorTypesDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OperatorTypesDto' from JSON`,
  );
}
