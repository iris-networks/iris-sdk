/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Default Operator Type
 */
export const DefaultOperator = {
  Browser: "browser",
  Computer: "computer",
} as const;
/**
 * Default Operator Type
 */
export type DefaultOperator = ClosedEnum<typeof DefaultOperator>;

export type ConfigResponseDto = {
  /**
   * VLM Base URL
   */
  vlmBaseUrl: string;
  /**
   * VLM API Key
   */
  vlmApiKey: string;
  /**
   * VLM Model Name
   */
  vlmModelName: string;
  /**
   * VLM Provider
   */
  vlmProvider: string;
  /**
   * Language
   */
  language: string;
  /**
   * Default Operator Type
   */
  defaultOperator: DefaultOperator;
  /**
   * Maximum Loop Count
   */
  maxLoopCount: number;
  /**
   * Loop Interval in Milliseconds
   */
  loopIntervalInMs: number;
};

/** @internal */
export const DefaultOperator$inboundSchema: z.ZodNativeEnum<
  typeof DefaultOperator
> = z.nativeEnum(DefaultOperator);

/** @internal */
export const DefaultOperator$outboundSchema: z.ZodNativeEnum<
  typeof DefaultOperator
> = DefaultOperator$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DefaultOperator$ {
  /** @deprecated use `DefaultOperator$inboundSchema` instead. */
  export const inboundSchema = DefaultOperator$inboundSchema;
  /** @deprecated use `DefaultOperator$outboundSchema` instead. */
  export const outboundSchema = DefaultOperator$outboundSchema;
}

/** @internal */
export const ConfigResponseDto$inboundSchema: z.ZodType<
  ConfigResponseDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  vlmBaseUrl: z.string(),
  vlmApiKey: z.string(),
  vlmModelName: z.string(),
  vlmProvider: z.string(),
  language: z.string(),
  defaultOperator: DefaultOperator$inboundSchema,
  maxLoopCount: z.number(),
  loopIntervalInMs: z.number(),
});

/** @internal */
export type ConfigResponseDto$Outbound = {
  vlmBaseUrl: string;
  vlmApiKey: string;
  vlmModelName: string;
  vlmProvider: string;
  language: string;
  defaultOperator: string;
  maxLoopCount: number;
  loopIntervalInMs: number;
};

/** @internal */
export const ConfigResponseDto$outboundSchema: z.ZodType<
  ConfigResponseDto$Outbound,
  z.ZodTypeDef,
  ConfigResponseDto
> = z.object({
  vlmBaseUrl: z.string(),
  vlmApiKey: z.string(),
  vlmModelName: z.string(),
  vlmProvider: z.string(),
  language: z.string(),
  defaultOperator: DefaultOperator$outboundSchema,
  maxLoopCount: z.number(),
  loopIntervalInMs: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConfigResponseDto$ {
  /** @deprecated use `ConfigResponseDto$inboundSchema` instead. */
  export const inboundSchema = ConfigResponseDto$inboundSchema;
  /** @deprecated use `ConfigResponseDto$outboundSchema` instead. */
  export const outboundSchema = ConfigResponseDto$outboundSchema;
  /** @deprecated use `ConfigResponseDto$Outbound` instead. */
  export type Outbound = ConfigResponseDto$Outbound;
}

export function configResponseDtoToJSON(
  configResponseDto: ConfigResponseDto,
): string {
  return JSON.stringify(
    ConfigResponseDto$outboundSchema.parse(configResponseDto),
  );
}

export function configResponseDtoFromJSON(
  jsonString: string,
): SafeParseResult<ConfigResponseDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConfigResponseDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConfigResponseDto' from JSON`,
  );
}
