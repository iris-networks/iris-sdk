/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Operator type used for the session
 */
export const OperatorType = {
  Browser: "browser",
  Computer: "computer",
} as const;
/**
 * Operator type used for the session
 */
export type OperatorType = ClosedEnum<typeof OperatorType>;

/**
 * Status of video generation
 */
export const VideoGenerationStatus = {
  Pending: "pending",
  InProgress: "in_progress",
  Completed: "completed",
  Failed: "failed",
} as const;
/**
 * Status of video generation
 */
export type VideoGenerationStatus = ClosedEnum<typeof VideoGenerationStatus>;

export type VideoRecordingDto = {
  /**
   * Unique identifier for the recording
   */
  id: string;
  /**
   * Session ID this recording belongs to
   */
  sessionId: string;
  /**
   * Title of the recording
   */
  title: string;
  /**
   * Description of the recording
   */
  description?: string | undefined;
  /**
   * Timestamp when the recording was created
   */
  createdAt: number;
  /**
   * Duration of the recording in milliseconds
   */
  duration: number;
  /**
   * Number of frames in the recording
   */
  frameCount: number;
  /**
   * Path to the thumbnail image
   */
  thumbnailPath?: string | undefined;
  /**
   * Path to the recording files
   */
  filePath: string;
  /**
   * Size of the recording in bytes
   */
  size: number;
  /**
   * Operator type used for the session
   */
  operatorType?: OperatorType | undefined;
  /**
   * Status of video generation
   */
  videoGenerationStatus?: VideoGenerationStatus | undefined;
  /**
   * Timestamp when video generation started
   */
  videoGenerationStartedAt?: number | undefined;
  /**
   * Timestamp when video generation completed
   */
  videoGenerationCompletedAt?: number | undefined;
  /**
   * Error message if video generation failed
   */
  videoGenerationError?: string | undefined;
  /**
   * Whether the recording has a video
   */
  hasVideo?: boolean | undefined;
  /**
   * Path to the generated video file
   */
  videoPath?: string | undefined;
  /**
   * Format of the generated video
   */
  videoFormat?: string | undefined;
  /**
   * Size of the generated video in bytes
   */
  videoSize?: number | undefined;
};

/** @internal */
export const OperatorType$inboundSchema: z.ZodNativeEnum<typeof OperatorType> =
  z.nativeEnum(OperatorType);

/** @internal */
export const OperatorType$outboundSchema: z.ZodNativeEnum<typeof OperatorType> =
  OperatorType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OperatorType$ {
  /** @deprecated use `OperatorType$inboundSchema` instead. */
  export const inboundSchema = OperatorType$inboundSchema;
  /** @deprecated use `OperatorType$outboundSchema` instead. */
  export const outboundSchema = OperatorType$outboundSchema;
}

/** @internal */
export const VideoGenerationStatus$inboundSchema: z.ZodNativeEnum<
  typeof VideoGenerationStatus
> = z.nativeEnum(VideoGenerationStatus);

/** @internal */
export const VideoGenerationStatus$outboundSchema: z.ZodNativeEnum<
  typeof VideoGenerationStatus
> = VideoGenerationStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VideoGenerationStatus$ {
  /** @deprecated use `VideoGenerationStatus$inboundSchema` instead. */
  export const inboundSchema = VideoGenerationStatus$inboundSchema;
  /** @deprecated use `VideoGenerationStatus$outboundSchema` instead. */
  export const outboundSchema = VideoGenerationStatus$outboundSchema;
}

/** @internal */
export const VideoRecordingDto$inboundSchema: z.ZodType<
  VideoRecordingDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  sessionId: z.string(),
  title: z.string(),
  description: z.string().optional(),
  createdAt: z.number(),
  duration: z.number(),
  frameCount: z.number(),
  thumbnailPath: z.string().optional(),
  filePath: z.string(),
  size: z.number(),
  operatorType: OperatorType$inboundSchema.optional(),
  videoGenerationStatus: VideoGenerationStatus$inboundSchema.optional(),
  videoGenerationStartedAt: z.number().optional(),
  videoGenerationCompletedAt: z.number().optional(),
  videoGenerationError: z.string().optional(),
  hasVideo: z.boolean().optional(),
  videoPath: z.string().optional(),
  videoFormat: z.string().optional(),
  videoSize: z.number().optional(),
});

/** @internal */
export type VideoRecordingDto$Outbound = {
  id: string;
  sessionId: string;
  title: string;
  description?: string | undefined;
  createdAt: number;
  duration: number;
  frameCount: number;
  thumbnailPath?: string | undefined;
  filePath: string;
  size: number;
  operatorType?: string | undefined;
  videoGenerationStatus?: string | undefined;
  videoGenerationStartedAt?: number | undefined;
  videoGenerationCompletedAt?: number | undefined;
  videoGenerationError?: string | undefined;
  hasVideo?: boolean | undefined;
  videoPath?: string | undefined;
  videoFormat?: string | undefined;
  videoSize?: number | undefined;
};

/** @internal */
export const VideoRecordingDto$outboundSchema: z.ZodType<
  VideoRecordingDto$Outbound,
  z.ZodTypeDef,
  VideoRecordingDto
> = z.object({
  id: z.string(),
  sessionId: z.string(),
  title: z.string(),
  description: z.string().optional(),
  createdAt: z.number(),
  duration: z.number(),
  frameCount: z.number(),
  thumbnailPath: z.string().optional(),
  filePath: z.string(),
  size: z.number(),
  operatorType: OperatorType$outboundSchema.optional(),
  videoGenerationStatus: VideoGenerationStatus$outboundSchema.optional(),
  videoGenerationStartedAt: z.number().optional(),
  videoGenerationCompletedAt: z.number().optional(),
  videoGenerationError: z.string().optional(),
  hasVideo: z.boolean().optional(),
  videoPath: z.string().optional(),
  videoFormat: z.string().optional(),
  videoSize: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VideoRecordingDto$ {
  /** @deprecated use `VideoRecordingDto$inboundSchema` instead. */
  export const inboundSchema = VideoRecordingDto$inboundSchema;
  /** @deprecated use `VideoRecordingDto$outboundSchema` instead. */
  export const outboundSchema = VideoRecordingDto$outboundSchema;
  /** @deprecated use `VideoRecordingDto$Outbound` instead. */
  export type Outbound = VideoRecordingDto$Outbound;
}

export function videoRecordingDtoToJSON(
  videoRecordingDto: VideoRecordingDto,
): string {
  return JSON.stringify(
    VideoRecordingDto$outboundSchema.parse(videoRecordingDto),
  );
}

export function videoRecordingDtoFromJSON(
  jsonString: string,
): SafeParseResult<VideoRecordingDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VideoRecordingDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VideoRecordingDto' from JSON`,
  );
}
