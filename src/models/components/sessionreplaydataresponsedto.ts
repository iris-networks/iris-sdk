/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  VideoDataDto,
  VideoDataDto$inboundSchema,
  VideoDataDto$Outbound,
  VideoDataDto$outboundSchema,
} from "./videodatadto.js";

export type SessionReplayDataResponseDto = {
  /**
   * Whether the request was successful
   */
  success: boolean;
  /**
   * Replay video data
   */
  replayData: VideoDataDto;
};

/** @internal */
export const SessionReplayDataResponseDto$inboundSchema: z.ZodType<
  SessionReplayDataResponseDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  success: z.boolean(),
  replayData: VideoDataDto$inboundSchema,
});

/** @internal */
export type SessionReplayDataResponseDto$Outbound = {
  success: boolean;
  replayData: VideoDataDto$Outbound;
};

/** @internal */
export const SessionReplayDataResponseDto$outboundSchema: z.ZodType<
  SessionReplayDataResponseDto$Outbound,
  z.ZodTypeDef,
  SessionReplayDataResponseDto
> = z.object({
  success: z.boolean(),
  replayData: VideoDataDto$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SessionReplayDataResponseDto$ {
  /** @deprecated use `SessionReplayDataResponseDto$inboundSchema` instead. */
  export const inboundSchema = SessionReplayDataResponseDto$inboundSchema;
  /** @deprecated use `SessionReplayDataResponseDto$outboundSchema` instead. */
  export const outboundSchema = SessionReplayDataResponseDto$outboundSchema;
  /** @deprecated use `SessionReplayDataResponseDto$Outbound` instead. */
  export type Outbound = SessionReplayDataResponseDto$Outbound;
}

export function sessionReplayDataResponseDtoToJSON(
  sessionReplayDataResponseDto: SessionReplayDataResponseDto,
): string {
  return JSON.stringify(
    SessionReplayDataResponseDto$outboundSchema.parse(
      sessionReplayDataResponseDto,
    ),
  );
}

export function sessionReplayDataResponseDtoFromJSON(
  jsonString: string,
): SafeParseResult<SessionReplayDataResponseDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SessionReplayDataResponseDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SessionReplayDataResponseDto' from JSON`,
  );
}
