/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CaptionDataDto,
  CaptionDataDto$inboundSchema,
  CaptionDataDto$Outbound,
  CaptionDataDto$outboundSchema,
} from "./captiondatadto.js";
import {
  VideoRecordingDto,
  VideoRecordingDto$inboundSchema,
  VideoRecordingDto$Outbound,
  VideoRecordingDto$outboundSchema,
} from "./videorecordingdto.js";

export type VideoDataDto = {
  /**
   * Array of base64-encoded frames
   */
  frames: Array<string>;
  /**
   * Array of caption data
   */
  captions: Array<CaptionDataDto>;
  /**
   * Optional recording metadata
   */
  metadata?: VideoRecordingDto | undefined;
};

/** @internal */
export const VideoDataDto$inboundSchema: z.ZodType<
  VideoDataDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  frames: z.array(z.string()),
  captions: z.array(CaptionDataDto$inboundSchema),
  metadata: VideoRecordingDto$inboundSchema.optional(),
});

/** @internal */
export type VideoDataDto$Outbound = {
  frames: Array<string>;
  captions: Array<CaptionDataDto$Outbound>;
  metadata?: VideoRecordingDto$Outbound | undefined;
};

/** @internal */
export const VideoDataDto$outboundSchema: z.ZodType<
  VideoDataDto$Outbound,
  z.ZodTypeDef,
  VideoDataDto
> = z.object({
  frames: z.array(z.string()),
  captions: z.array(CaptionDataDto$outboundSchema),
  metadata: VideoRecordingDto$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VideoDataDto$ {
  /** @deprecated use `VideoDataDto$inboundSchema` instead. */
  export const inboundSchema = VideoDataDto$inboundSchema;
  /** @deprecated use `VideoDataDto$outboundSchema` instead. */
  export const outboundSchema = VideoDataDto$outboundSchema;
  /** @deprecated use `VideoDataDto$Outbound` instead. */
  export type Outbound = VideoDataDto$Outbound;
}

export function videoDataDtoToJSON(videoDataDto: VideoDataDto): string {
  return JSON.stringify(VideoDataDto$outboundSchema.parse(videoDataDto));
}

export function videoDataDtoFromJSON(
  jsonString: string,
): SafeParseResult<VideoDataDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VideoDataDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VideoDataDto' from JSON`,
  );
}
