/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type FileUploadResponseDto = {
  /**
   * Unique ID for the uploaded file
   */
  fileId: string;
  /**
   * The filename with timestamp
   */
  fileName: string;
  /**
   * The full file path
   */
  filePath: string;
  /**
   * URL to access the file
   */
  fileUrl: string;
  /**
   * Size of the file in bytes
   */
  fileSize: number;
  /**
   * MIME type of the file
   */
  mimeType: string;
  /**
   * Upload status message
   */
  message: string;
};

/** @internal */
export const FileUploadResponseDto$inboundSchema: z.ZodType<
  FileUploadResponseDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  fileId: z.string(),
  fileName: z.string(),
  filePath: z.string(),
  fileUrl: z.string(),
  fileSize: z.number(),
  mimeType: z.string(),
  message: z.string(),
});

/** @internal */
export type FileUploadResponseDto$Outbound = {
  fileId: string;
  fileName: string;
  filePath: string;
  fileUrl: string;
  fileSize: number;
  mimeType: string;
  message: string;
};

/** @internal */
export const FileUploadResponseDto$outboundSchema: z.ZodType<
  FileUploadResponseDto$Outbound,
  z.ZodTypeDef,
  FileUploadResponseDto
> = z.object({
  fileId: z.string(),
  fileName: z.string(),
  filePath: z.string(),
  fileUrl: z.string(),
  fileSize: z.number(),
  mimeType: z.string(),
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FileUploadResponseDto$ {
  /** @deprecated use `FileUploadResponseDto$inboundSchema` instead. */
  export const inboundSchema = FileUploadResponseDto$inboundSchema;
  /** @deprecated use `FileUploadResponseDto$outboundSchema` instead. */
  export const outboundSchema = FileUploadResponseDto$outboundSchema;
  /** @deprecated use `FileUploadResponseDto$Outbound` instead. */
  export type Outbound = FileUploadResponseDto$Outbound;
}

export function fileUploadResponseDtoToJSON(
  fileUploadResponseDto: FileUploadResponseDto,
): string {
  return JSON.stringify(
    FileUploadResponseDto$outboundSchema.parse(fileUploadResponseDto),
  );
}

export function fileUploadResponseDtoFromJSON(
  jsonString: string,
): SafeParseResult<FileUploadResponseDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FileUploadResponseDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FileUploadResponseDto' from JSON`,
  );
}
