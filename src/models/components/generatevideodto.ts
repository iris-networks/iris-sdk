/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Video format to generate
 */
export const Format = {
  Mp4: "mp4",
  Webm: "webm",
  Gif: "gif",
} as const;
/**
 * Video format to generate
 */
export type Format = ClosedEnum<typeof Format>;

/**
 * Video quality level
 */
export const Quality = {
  Low: "low",
  Medium: "medium",
  High: "high",
} as const;
/**
 * Video quality level
 */
export type Quality = ClosedEnum<typeof Quality>;

export type GenerateVideoDto = {
  /**
   * Frames per second for the generated video (0.2 = 5 seconds per frame)
   */
  fps?: number | undefined;
  /**
   * Whether to include captions in the video
   */
  captionsEnabled?: boolean | undefined;
  /**
   * Video format to generate
   */
  format?: Format | undefined;
  /**
   * Video quality level
   */
  quality?: Quality | undefined;
};

/** @internal */
export const Format$inboundSchema: z.ZodNativeEnum<typeof Format> = z
  .nativeEnum(Format);

/** @internal */
export const Format$outboundSchema: z.ZodNativeEnum<typeof Format> =
  Format$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Format$ {
  /** @deprecated use `Format$inboundSchema` instead. */
  export const inboundSchema = Format$inboundSchema;
  /** @deprecated use `Format$outboundSchema` instead. */
  export const outboundSchema = Format$outboundSchema;
}

/** @internal */
export const Quality$inboundSchema: z.ZodNativeEnum<typeof Quality> = z
  .nativeEnum(Quality);

/** @internal */
export const Quality$outboundSchema: z.ZodNativeEnum<typeof Quality> =
  Quality$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Quality$ {
  /** @deprecated use `Quality$inboundSchema` instead. */
  export const inboundSchema = Quality$inboundSchema;
  /** @deprecated use `Quality$outboundSchema` instead. */
  export const outboundSchema = Quality$outboundSchema;
}

/** @internal */
export const GenerateVideoDto$inboundSchema: z.ZodType<
  GenerateVideoDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  fps: z.number().default(0.2),
  captionsEnabled: z.boolean().default(true),
  format: Format$inboundSchema.default("mp4"),
  quality: Quality$inboundSchema.default("medium"),
});

/** @internal */
export type GenerateVideoDto$Outbound = {
  fps: number;
  captionsEnabled: boolean;
  format: string;
  quality: string;
};

/** @internal */
export const GenerateVideoDto$outboundSchema: z.ZodType<
  GenerateVideoDto$Outbound,
  z.ZodTypeDef,
  GenerateVideoDto
> = z.object({
  fps: z.number().default(0.2),
  captionsEnabled: z.boolean().default(true),
  format: Format$outboundSchema.default("mp4"),
  quality: Quality$outboundSchema.default("medium"),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GenerateVideoDto$ {
  /** @deprecated use `GenerateVideoDto$inboundSchema` instead. */
  export const inboundSchema = GenerateVideoDto$inboundSchema;
  /** @deprecated use `GenerateVideoDto$outboundSchema` instead. */
  export const outboundSchema = GenerateVideoDto$outboundSchema;
  /** @deprecated use `GenerateVideoDto$Outbound` instead. */
  export type Outbound = GenerateVideoDto$Outbound;
}

export function generateVideoDtoToJSON(
  generateVideoDto: GenerateVideoDto,
): string {
  return JSON.stringify(
    GenerateVideoDto$outboundSchema.parse(generateVideoDto),
  );
}

export function generateVideoDtoFromJSON(
  jsonString: string,
): SafeParseResult<GenerateVideoDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GenerateVideoDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GenerateVideoDto' from JSON`,
  );
}
