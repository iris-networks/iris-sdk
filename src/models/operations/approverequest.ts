/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ApproveRequestRequest = {
  requestId: string;
};

/** @internal */
export const ApproveRequestRequest$inboundSchema: z.ZodType<
  ApproveRequestRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  requestId: z.string(),
});

/** @internal */
export type ApproveRequestRequest$Outbound = {
  requestId: string;
};

/** @internal */
export const ApproveRequestRequest$outboundSchema: z.ZodType<
  ApproveRequestRequest$Outbound,
  z.ZodTypeDef,
  ApproveRequestRequest
> = z.object({
  requestId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApproveRequestRequest$ {
  /** @deprecated use `ApproveRequestRequest$inboundSchema` instead. */
  export const inboundSchema = ApproveRequestRequest$inboundSchema;
  /** @deprecated use `ApproveRequestRequest$outboundSchema` instead. */
  export const outboundSchema = ApproveRequestRequest$outboundSchema;
  /** @deprecated use `ApproveRequestRequest$Outbound` instead. */
  export type Outbound = ApproveRequestRequest$Outbound;
}

export function approveRequestRequestToJSON(
  approveRequestRequest: ApproveRequestRequest,
): string {
  return JSON.stringify(
    ApproveRequestRequest$outboundSchema.parse(approveRequestRequest),
  );
}

export function approveRequestRequestFromJSON(
  jsonString: string,
): SafeParseResult<ApproveRequestRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApproveRequestRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApproveRequestRequest' from JSON`,
  );
}
