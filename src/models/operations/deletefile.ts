/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteFileRequest = {
  /**
   * File ID
   */
  id: string;
};

/**
 * File deleted successfully
 */
export type DeleteFileResponseBody = {
  success?: boolean | undefined;
  message?: string | undefined;
};

/** @internal */
export const DeleteFileRequest$inboundSchema: z.ZodType<
  DeleteFileRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type DeleteFileRequest$Outbound = {
  id: string;
};

/** @internal */
export const DeleteFileRequest$outboundSchema: z.ZodType<
  DeleteFileRequest$Outbound,
  z.ZodTypeDef,
  DeleteFileRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteFileRequest$ {
  /** @deprecated use `DeleteFileRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteFileRequest$inboundSchema;
  /** @deprecated use `DeleteFileRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteFileRequest$outboundSchema;
  /** @deprecated use `DeleteFileRequest$Outbound` instead. */
  export type Outbound = DeleteFileRequest$Outbound;
}

export function deleteFileRequestToJSON(
  deleteFileRequest: DeleteFileRequest,
): string {
  return JSON.stringify(
    DeleteFileRequest$outboundSchema.parse(deleteFileRequest),
  );
}

export function deleteFileRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteFileRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteFileRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteFileRequest' from JSON`,
  );
}

/** @internal */
export const DeleteFileResponseBody$inboundSchema: z.ZodType<
  DeleteFileResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  success: z.boolean().optional(),
  message: z.string().optional(),
});

/** @internal */
export type DeleteFileResponseBody$Outbound = {
  success?: boolean | undefined;
  message?: string | undefined;
};

/** @internal */
export const DeleteFileResponseBody$outboundSchema: z.ZodType<
  DeleteFileResponseBody$Outbound,
  z.ZodTypeDef,
  DeleteFileResponseBody
> = z.object({
  success: z.boolean().optional(),
  message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteFileResponseBody$ {
  /** @deprecated use `DeleteFileResponseBody$inboundSchema` instead. */
  export const inboundSchema = DeleteFileResponseBody$inboundSchema;
  /** @deprecated use `DeleteFileResponseBody$outboundSchema` instead. */
  export const outboundSchema = DeleteFileResponseBody$outboundSchema;
  /** @deprecated use `DeleteFileResponseBody$Outbound` instead. */
  export type Outbound = DeleteFileResponseBody$Outbound;
}

export function deleteFileResponseBodyToJSON(
  deleteFileResponseBody: DeleteFileResponseBody,
): string {
  return JSON.stringify(
    DeleteFileResponseBody$outboundSchema.parse(deleteFileResponseBody),
  );
}

export function deleteFileResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<DeleteFileResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteFileResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteFileResponseBody' from JSON`,
  );
}
