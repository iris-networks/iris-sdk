/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import * as b64$ from "../../lib/base64.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type StreamVideoRequest = {
  /**
   * The ID of the recording to stream video for
   */
  id: string;
  /**
   * Set to "true" to download the video instead of streaming it
   */
  download?: boolean | undefined;
};

export type StreamVideoResponse =
  | ReadableStream<Uint8Array>
  | ReadableStream<Uint8Array>
  | ReadableStream<Uint8Array>
  | Uint8Array
  | string;

/** @internal */
export const StreamVideoRequest$inboundSchema: z.ZodType<
  StreamVideoRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  download: z.boolean().optional(),
});

/** @internal */
export type StreamVideoRequest$Outbound = {
  id: string;
  download?: boolean | undefined;
};

/** @internal */
export const StreamVideoRequest$outboundSchema: z.ZodType<
  StreamVideoRequest$Outbound,
  z.ZodTypeDef,
  StreamVideoRequest
> = z.object({
  id: z.string(),
  download: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamVideoRequest$ {
  /** @deprecated use `StreamVideoRequest$inboundSchema` instead. */
  export const inboundSchema = StreamVideoRequest$inboundSchema;
  /** @deprecated use `StreamVideoRequest$outboundSchema` instead. */
  export const outboundSchema = StreamVideoRequest$outboundSchema;
  /** @deprecated use `StreamVideoRequest$Outbound` instead. */
  export type Outbound = StreamVideoRequest$Outbound;
}

export function streamVideoRequestToJSON(
  streamVideoRequest: StreamVideoRequest,
): string {
  return JSON.stringify(
    StreamVideoRequest$outboundSchema.parse(streamVideoRequest),
  );
}

export function streamVideoRequestFromJSON(
  jsonString: string,
): SafeParseResult<StreamVideoRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StreamVideoRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StreamVideoRequest' from JSON`,
  );
}

/** @internal */
export const StreamVideoResponse$inboundSchema: z.ZodType<
  StreamVideoResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.instanceof(ReadableStream<Uint8Array>),
  z.instanceof(ReadableStream<Uint8Array>),
  z.instanceof(ReadableStream<Uint8Array>),
  b64$.zodInbound,
]);

/** @internal */
export type StreamVideoResponse$Outbound =
  | ReadableStream<Uint8Array>
  | ReadableStream<Uint8Array>
  | ReadableStream<Uint8Array>
  | Uint8Array;

/** @internal */
export const StreamVideoResponse$outboundSchema: z.ZodType<
  StreamVideoResponse$Outbound,
  z.ZodTypeDef,
  StreamVideoResponse
> = z.union([
  z.instanceof(ReadableStream<Uint8Array>),
  z.instanceof(ReadableStream<Uint8Array>),
  z.instanceof(ReadableStream<Uint8Array>),
  b64$.zodOutbound,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamVideoResponse$ {
  /** @deprecated use `StreamVideoResponse$inboundSchema` instead. */
  export const inboundSchema = StreamVideoResponse$inboundSchema;
  /** @deprecated use `StreamVideoResponse$outboundSchema` instead. */
  export const outboundSchema = StreamVideoResponse$outboundSchema;
  /** @deprecated use `StreamVideoResponse$Outbound` instead. */
  export type Outbound = StreamVideoResponse$Outbound;
}

export function streamVideoResponseToJSON(
  streamVideoResponse: StreamVideoResponse,
): string {
  return JSON.stringify(
    StreamVideoResponse$outboundSchema.parse(streamVideoResponse),
  );
}

export function streamVideoResponseFromJSON(
  jsonString: string,
): SafeParseResult<StreamVideoResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StreamVideoResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StreamVideoResponse' from JSON`,
  );
}
