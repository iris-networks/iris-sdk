/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GenerateVideoRequest = {
  /**
   * The ID of the recording to generate a video for
   */
  id: string;
  /**
   * Options for video generation
   */
  generateVideoDto?: components.GenerateVideoDto | undefined;
};

/** @internal */
export const GenerateVideoRequest$inboundSchema: z.ZodType<
  GenerateVideoRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  GenerateVideoDto: components.GenerateVideoDto$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "GenerateVideoDto": "generateVideoDto",
  });
});

/** @internal */
export type GenerateVideoRequest$Outbound = {
  id: string;
  GenerateVideoDto?: components.GenerateVideoDto$Outbound | undefined;
};

/** @internal */
export const GenerateVideoRequest$outboundSchema: z.ZodType<
  GenerateVideoRequest$Outbound,
  z.ZodTypeDef,
  GenerateVideoRequest
> = z.object({
  id: z.string(),
  generateVideoDto: components.GenerateVideoDto$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    generateVideoDto: "GenerateVideoDto",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GenerateVideoRequest$ {
  /** @deprecated use `GenerateVideoRequest$inboundSchema` instead. */
  export const inboundSchema = GenerateVideoRequest$inboundSchema;
  /** @deprecated use `GenerateVideoRequest$outboundSchema` instead. */
  export const outboundSchema = GenerateVideoRequest$outboundSchema;
  /** @deprecated use `GenerateVideoRequest$Outbound` instead. */
  export type Outbound = GenerateVideoRequest$Outbound;
}

export function generateVideoRequestToJSON(
  generateVideoRequest: GenerateVideoRequest,
): string {
  return JSON.stringify(
    GenerateVideoRequest$outboundSchema.parse(generateVideoRequest),
  );
}

export function generateVideoRequestFromJSON(
  jsonString: string,
): SafeParseResult<GenerateVideoRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GenerateVideoRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GenerateVideoRequest' from JSON`,
  );
}
