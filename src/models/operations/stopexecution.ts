/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type StopExecutionRequest = {
  /**
   * ID of the RPA execution to stop
   */
  executionId: string;
};

/** @internal */
export const StopExecutionRequest$inboundSchema: z.ZodType<
  StopExecutionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  executionId: z.string(),
});

/** @internal */
export type StopExecutionRequest$Outbound = {
  executionId: string;
};

/** @internal */
export const StopExecutionRequest$outboundSchema: z.ZodType<
  StopExecutionRequest$Outbound,
  z.ZodTypeDef,
  StopExecutionRequest
> = z.object({
  executionId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StopExecutionRequest$ {
  /** @deprecated use `StopExecutionRequest$inboundSchema` instead. */
  export const inboundSchema = StopExecutionRequest$inboundSchema;
  /** @deprecated use `StopExecutionRequest$outboundSchema` instead. */
  export const outboundSchema = StopExecutionRequest$outboundSchema;
  /** @deprecated use `StopExecutionRequest$Outbound` instead. */
  export type Outbound = StopExecutionRequest$Outbound;
}

export function stopExecutionRequestToJSON(
  stopExecutionRequest: StopExecutionRequest,
): string {
  return JSON.stringify(
    StopExecutionRequest$outboundSchema.parse(stopExecutionRequest),
  );
}

export function stopExecutionRequestFromJSON(
  jsonString: string,
): SafeParseResult<StopExecutionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StopExecutionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StopExecutionRequest' from JSON`,
  );
}
